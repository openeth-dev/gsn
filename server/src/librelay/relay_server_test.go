package librelay

import (
	"context"
	"crypto/ecdsa"
	"encoding/hex"
	"flag"
	"fmt"
	"gen/librelay"
	"gen/samplerec"
	"librelay/test"
	"librelay/txstore"
	"log"
	"math/big"
	"os"
	"strings"
	"testing"
	"time"

	"code.cloudfoundry.org/clock/fakeclock"

	"github.com/ethereum/go-ethereum"
	"github.com/ethereum/go-ethereum/accounts/abi"
	"github.com/ethereum/go-ethereum/accounts/abi/bind"
	"github.com/ethereum/go-ethereum/common"
	"github.com/ethereum/go-ethereum/common/hexutil"
	"github.com/ethereum/go-ethereum/core/types"
	"github.com/ethereum/go-ethereum/crypto"
	"github.com/ethereum/go-ethereum/ethclient"
	"github.com/ethereum/go-ethereum/params"
	"github.com/ethereum/go-ethereum/rpc"
)

type TestClient struct {
	*ethclient.Client

	RPC *rpc.Client
}

func NewTestClient(url string) (*TestClient, error) {
	rpcClient, err := rpc.DialContext(context.Background(), url)
	if err != nil {
		return nil, err
	}

	return &TestClient{
		ethclient.NewClient(rpcClient),
		rpcClient,
	}, nil
}

func (client *TestClient) AdjustTime(seconds uint64) error {
	return client.RPC.Call(nil, "evm_increaseTime", seconds)
}

func (client *TestClient) Commit() error {
	return client.RPC.Call(nil, "evm_mine")
}

func (client *TestClient) MineBlocks(n uint64) error {
	for ; n > 0; n-- {
		err := client.RPC.Call(nil, "evm_mine")
		if err != nil {
			return err
		}
	}
	return nil
}

func (client *TestClient) Snapshot() (uint64, error) {
	var result hexutil.Uint64
	err := client.RPC.Call(&result, "evm_snapshot")
	return uint64(result), err
}

func (client *TestClient) Revert(id uint64) error {
	return client.RPC.Call(nil, "evm_revert", id)
}

type TestServer struct {
	*RelayServer
}

func (relay *TestServer) Stake(ownerKey *ecdsa.PrivateKey) (err error) {
	tx, err := relay.sendStakeTransaction(ownerKey)
	if err != nil {
		return err
	}
	return relay.awaitTransactionMined(tx)
}

func (relay *TestServer) sendStakeTransaction(ownerKey *ecdsa.PrivateKey) (tx *types.Transaction, err error) {
	auth := bind.NewKeyedTransactor(ownerKey)
	auth.Value = relay.StakeAmount
	tx, err = relay.rhub.Stake(auth, relay.Address(), relay.UnstakeDelay)
	if err != nil {
		log.Println("rhub.stake() failed", relay.StakeAmount, relay.UnstakeDelay)
		return
	}
	log.Println("Stake() tx sent:", tx.Hash().Hex())
	return
}

func (relay *TestServer) Unstake(ownerKey *ecdsa.PrivateKey) (err error) {
	tx, err := relay.sendUnstakeTransaction(ownerKey)
	if err != nil {
		return err
	}
	return relay.awaitTransactionMined(tx)

}

func (relay *TestServer) sendUnstakeTransaction(ownerKey *ecdsa.PrivateKey) (tx *types.Transaction, err error) {
	auth := bind.NewKeyedTransactor(ownerKey)
	auth.Value = relay.StakeAmount
	tx, err = relay.rhub.Unstake(auth, relay.Address())
	if err != nil {
		log.Println("rhub.Unstake() failed", relay.StakeAmount, relay.UnstakeDelay)
		return
	}
	log.Println("Unstake() tx sent:", tx.Hash().Hex())
	return
}

var auth *bind.TransactOpts
var relay TestServer
var client *TestClient
var relayKey1 *ecdsa.PrivateKey
var gaslessKey2 *ecdsa.PrivateKey
var ownerKey3 *ecdsa.PrivateKey
var rhub *librelay.IRelayHub
var clk *fakeclock.FakeClock

var sampleRecipient common.Address
var rhaddr common.Address

var boundHub *bind.BoundContract
var boundRecipient *bind.BoundContract

var ethereumNodeURL = "http://localhost:8543"

func InitTestClient(url string) {
	relayKey1, _ = crypto.HexToECDSA("4f3edf983ac636a65a842ce7c78d9aa706d3b113bce9c46f30d7d21715b23b1d")
	gaslessKey2, _ = crypto.HexToECDSA("6cbed15c793ce57650b9877cf6fa156fbef513c4e6134f022a85b1ffdd59b2a1")
	ownerKey3, _ = crypto.HexToECDSA("6370fd033278c143179d81c5526140625662b8daa446c22ee2d73db3707e620c")

	fmt.Println("Test addresses:")
	fmt.Println("1. Relay  ", crypto.PubkeyToAddress(relayKey1.PublicKey).Hex())
	fmt.Println("2. Gasless", crypto.PubkeyToAddress(gaslessKey2.PublicKey).Hex())
	fmt.Println("3. Owner  ", crypto.PubkeyToAddress(ownerKey3.PublicKey).Hex())

	auth = bind.NewKeyedTransactor(relayKey1)
	var err error
	client, err = NewTestClient(url)
	if err != nil {
		log.Fatalf("Could not connect to local ganache: %v", err)
	}
	client.Commit()
}

func NewRelay(relayHubAddress common.Address) {
	fee := big.NewInt(10)
	stakeAmount := big.NewInt(1100000000000000000)
	gasLimit := uint64(1000000)
	defaultGasPrice := int64(params.GWei)
	gasPricePercent := big.NewInt(10)
	url := ""
	port := "8090"
	unstakeDelay := big.NewInt(3600 * 24 * 7)
	registrationBlockRate := uint64(5)
	clk = fakeclock.NewFakeClock(time.Now())
	txStore := txstore.NewMemoryTxStore(clk)
	var err error
	relay.RelayServer, err = NewRelayServer(
		common.Address{}, fee, url, port,
		relayHubAddress, stakeAmount, gasLimit, defaultGasPrice,
		gasPricePercent, relayKey1, unstakeDelay, registrationBlockRate,
		ethereumNodeURL, client, txStore, clk)
	if err != nil {
		log.Fatalln("Relay was not created", err)
	}
	return
}

func TestMain(m *testing.M) {
	InitTestClient(ethereumNodeURL)
	parsed, err := abi.JSON(strings.NewReader(librelay.IRelayHubABI))
	if err != nil {
		log.Fatalln(err)
	}

	// RelayHub's bytecode - the interface's artifact doesn't include it
	RelayHubBin := "0x60806040526040518060400160405280600581526020017f312e302e30000000000000000000000000000000000000000000000000000000815250600390805190602001906200005192919062000066565b503480156200005f57600080fd5b5062000115565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f10620000a957805160ff1916838001178555620000da565b82800160010185558215620000da579182015b82811115620000d9578251825591602001919060010190620000bc565b5b509050620000e99190620000ed565b5090565b6200011291905b808211156200010e576000816000905550600101620000f4565b5090565b90565b615e7d80620001256000396000f3fe6080604052600436106101095760003560e01c806370a0823111610095578063a8cd957211610064578063a8cd9572146103c9578063aa67c919146103f2578063adc9772e1461040e578063c3e712f21461042a578063f2888dbb1461045357610109565b806370a08231146102d157806385f4498b1461030e5780638d8514601461034b578063a863f8f91461038c57610109565b80632e1a7d4d116100dc5780632e1a7d4d146101ee5780633900243214610217578063405cec671461024057806354fd4d50146102695780636a7d84a41461029457610109565b80631166073a1461010e57806322741d33146101375780632b601747146101745780632d0335ab146101b1575b600080fd5b34801561011a57600080fd5b5061013560048036036101309190810190614462565b61047c565b005b34801561014357600080fd5b5061015e600480360361015991908101906143bc565b610891565b60405161016b91906155a9565b60405180910390f35b34801561018057600080fd5b5061019b60048036036101969190810190613fce565b610d17565b6040516101a891906159f6565b60405180910390f35b3480156101bd57600080fd5b506101d860048036036101d39190810190613fa5565b610fd8565b6040516101e591906159f6565b60405180910390f35b3480156101fa57600080fd5b5061021560048036036102109190810190614410565b611020565b005b34801561022357600080fd5b5061023e60048036036102399190810190614264565b61118d565b005b34801561024c57600080fd5b50610267600480360361026291908101906140f1565b611310565b005b34801561027557600080fd5b5061027e6113fd565b60405161028b91906155c4565b60405180910390f35b3480156102a057600080fd5b506102bb60048036036102b69190810190614410565b61149b565b6040516102c891906159f6565b60405180910390f35b3480156102dd57600080fd5b506102f860048036036102f39190810190613fa5565b6114b9565b60405161030591906159f6565b60405180910390f35b34801561031a57600080fd5b5061033560048036036103309190810190613fa5565b611502565b60405161034291906154e9565b60405180910390f35b34801561035757600080fd5b50610372600480360361036d9190810190613fa5565b61159e565b604051610383959493929190615a3a565b60405180910390f35b34801561039857600080fd5b506103b360048036036103ae91908101906144b6565b611735565b6040516103c091906159f6565b60405180910390f35b3480156103d557600080fd5b506103f060048036036103eb91908101906142d0565b611753565b005b61040c60048036036104079190810190613fa5565b611985565b005b610428600480360361042391908101906141ff565b611aca565b005b34801561043657600080fd5b50610451600480360361044c9190810190613fa5565b612192565b005b34801561045f57600080fd5b5061047a60048036036104759190810190613fa5565b6124fc565b005b60003390503273ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16146104ef576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016104e690615986565b60405180910390fd5b600160038111156104fc57fe5b600160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060030160149054906101000a900460ff16600381111561055757fe5b14806105c857506002600381111561056b57fe5b600160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060030160149054906101000a900460ff1660038111156105c657fe5b145b610607576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016105fe906157c6565b60405180910390fd5b67016345785d8a00008173ffffffffffffffffffffffffffffffffffffffff16311015610669576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161066090615866565b60405180910390fd5b6002600381111561067657fe5b600160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060030160149054906101000a900460ff1660038111156106d157fe5b1461073b576002600160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060030160146101000a81548160ff0219169083600381111561073557fe5b02179055505b600160008273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060030160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f85b3ae3aae9d3fcb31142fbd8c3b4722d57825b8edd6e1366e69204afa5a0dfa85600160008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060000154600160008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060010154876040516108849493929190615a8d565b60405180910390a3505050565b60003073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610901576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016108f890615646565b60405180910390fd5b600060026000856040015173ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905060006060856040015173ffffffffffffffffffffffffffffffffffffffff1663fd9ae637905060e01b86600001518760200151886060015189608001518a60a001518b60c001518c61016001516040516024016109ac97969594939291906153d0565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff8381831617835250505050905060006060876040015173ffffffffffffffffffffffffffffffffffffffff16620186a084604051610a3c919061519c565b60006040518083038160008787f1925050503d8060008114610a7a576040519150601f19603f3d011682016040523d82523d6000602084013e610a7f565b606091505b509150915081610a9457610a93600261278f565b5b80806020019051610aa8919081019061423b565b93505050506000856040015173ffffffffffffffffffffffffffffffffffffffff168660c0015187606001518860200151604051602001610aea9291906151db565b604051602081830303815290604052604051610b06919061519c565b60006040518083038160008787f1925050503d8060008114610b44576040519150601f19603f3d011682016040523d82523d6000602084013e610b49565b606091505b5050905060005a8661c310010390506060876040015173ffffffffffffffffffffffffffffffffffffffff16639df2acc0905060e01b886000015189602001518a606001518b608001518c60a001518d60c001518e6101600151898b8d604051602401610bbf9a99989796959493929190615446565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff838183161783525050505090506000886040015173ffffffffffffffffffffffffffffffffffffffff16620186a083604051610c4d919061519c565b60006040518083038160008787f1925050503d8060008114610c8b576040519150601f19603f3d011682016040523d82523d6000602084013e610c90565b606091505b5050905080610ca457610ca3600361278f565b5b50508360026000896040015173ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020541015610cfc57610cfb600461278f565b5b81610d08576001610d0b565b60005b94505050505092915050565b600060608a8a8a8a8a8a8a30604051602001610d3a989796959493929190615273565b60405160208183030381529060405290506000818d604051602001610d609291906151b3565b6040516020818303038152906040528051906020012090508b73ffffffffffffffffffffffffffffffffffffffff16610daa86610d9c846127bd565b6127ed90919063ffffffff16565b73ffffffffffffffffffffffffffffffffffffffff1614610ddb5760016004811115610dd257fe5b92505050610fca565b856000808e73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205414610e365760026004811115610e2d57fe5b92505050610fca565b6000610e43888a8c611735565b905060608c73ffffffffffffffffffffffffffffffffffffffff166383947ea0905060e01b8f8f8e8e8e8e8e8d8a604051602401610e8999989796959493929190615335565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff83818316178352505050509050600060608e73ffffffffffffffffffffffffffffffffffffffff1661c35084604051610f14919061519c565b6000604051808303818686fa925050503d8060008114610f50576040519150601f19603f3d011682016040523d82523d6000602084013e610f55565b606091505b509150915081610f795760036004811115610f6c57fe5b9650505050505050610fca565b600081806020019051610f8f9190810190614439565b90506000811480610fa05750600a81115b15610fb45780975050505050505050610fca565b600480811115610fc057fe5b9750505050505050505b9a9950505050505050505050565b60008060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b600033905081600260008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205410156110a7576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161109e90615906565b60405180910390fd5b81600260008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825403925050819055508073ffffffffffffffffffffffffffffffffffffffff166108fc839081150290604051600060405180830381858888f1935050505015801561113a573d6000803e3d6000fd5b508073ffffffffffffffffffffffffffffffffffffffff167f7084f5476618d8e60b11ef0d7d3f06914655adb8793e28ff7f018d4c76d505d58360405161118191906159f6565b60405180910390a25050565b611195613b83565b61119e836128d9565b90503073ffffffffffffffffffffffffffffffffffffffff16816060015173ffffffffffffffffffffffffffffffffffffffff1614156112c45760006111e78260a00151612956565b905063405cec6760e01b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916817bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916141580156112835750631166073a60e01b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916817bffffffffffffffffffffffffffffffffffffffffffffffffffffffff191614155b6112c2576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016112b990615626565b60405180910390fd5b505b60006112ff83856040516020016112db919061519c565b604051602081830303815290604052805190602001206127ed90919063ffffffff16565b905061130a8161296d565b50505050565b60005a905061131d613bcf565b6040518061018001604052803373ffffffffffffffffffffffffffffffffffffffff1681526020018c73ffffffffffffffffffffffffffffffffffffffff1681526020018b73ffffffffffffffffffffffffffffffffffffffff1681526020018a81526020018981526020018881526020018781526020018681526020018581526020018481526020016113b28b6000612d95565b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff191681526020016113e1888a8c611735565b81525090506113f08183612e18565b5050505050505050505050565b60038054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156114935780601f1061146857610100808354040283529160200191611493565b820191906000526020600020905b81548152906001019060200180831161147657829003601f168201915b505050505081565b600081620186a08061c350620186a061c31001010101019050919050565b6000600260008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b600080600160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060020154118015611597575042600160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206002015411155b9050919050565b6000806000806000600160008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600001549450600160008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600101549350600160008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600201549250600160008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060030160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169150600160008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060030160149054906101000a900460ff16905091939590929450565b600061174a6117438561149b565b8484613461565b90509392505050565b600061178e848660405160200161176a919061519c565b604051602081830303815290604052805190602001206127ed90919063ffffffff16565b905060006117cb83856040516020016117a7919061519c565b604051602081830303815290604052805190602001206127ed90919063ffffffff16565b90508073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161461183b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161183290615806565b60405180910390fd5b611843613b83565b61184c876128d9565b9050611856613b83565b61185f866128d9565b905080600001518260000151146118ab576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016118a2906157a6565b60405180910390fd5b60608260a001518360400151846060015185608001516040516020016118d49493929190615203565b604051602081830303815290604052905060608260a0015183604001518460600151856080015160405160200161190e9493929190615203565b6040516020818303038152906040529050808051906020012082805190602001201415611970576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161196790615846565b60405180910390fd5b6119798661296d565b50505050505050505050565b6000349050671bc16d674ec800008111156119d5576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016119cc90615706565b60405180910390fd5b611a1e600260008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020548261347e565b600260008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055503373ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff167f8752a472e571a816aea92eec8dae9baf628e840f4929fbcc2d155e6233ff68a783604051611abe91906159f6565b60405180910390a35050565b60006003811115611ad757fe5b600160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060030160149054906101000a900460ff166003811115611b3257fe5b1415611c90578173ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161415611ba7576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611b9e90615686565b60405180910390fd5b33600160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060030160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060018060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060030160146101000a81548160ff02191690836003811115611c8657fe5b0217905550611e7f565b60016003811115611c9d57fe5b600160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060030160149054906101000a900460ff166003811115611cf857fe5b1480611d69575060026003811115611d0c57fe5b600160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060030160149054906101000a900460ff166003811115611d6757fe5b145b15611e43573373ffffffffffffffffffffffffffffffffffffffff16600160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060030160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614611e3e576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611e3590615966565b60405180910390fd5b611e7e565b6040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611e75906157c6565b60405180910390fd5b5b600034905080600160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060000160008282540192505081905550670de0b6b3a7640000600160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600001541015611f61576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611f58906158e6565b60405180910390fd5b62093a80821015611fa7576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611f9e90615746565b60405180910390fd5b626ebe00821115611fed576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611fe490615826565b60405180910390fd5b600160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060010154821015612072576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612069906157e6565b60405180910390fd5b81600160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600101819055508273ffffffffffffffffffffffffffffffffffffffff167f1449c6dd7851abc30abf37f57715f492010519147cc2652fbc38202c18a6ee90600160008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060000154600160008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060010154604051612185929190615a11565b60405180910390a2505050565b3373ffffffffffffffffffffffffffffffffffffffff16600160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060030160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614612262576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161225990615966565b60405180910390fd5b6001600381111561226f57fe5b600160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060030160149054906101000a900460ff1660038111156122ca57fe5b148061233b5750600260038111156122de57fe5b600160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060030160149054906101000a900460ff16600381111561233957fe5b145b61237a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161237190615926565b60405180910390fd5b42600160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206001015401600160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600201819055506003600160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060030160146101000a81548160ff0219169083600381111561246457fe5b02179055508073ffffffffffffffffffffffffffffffffffffffff167f5490afc1d818789c8b3d5d63bce3d2a3327d0bba4efb5a7751f783dc977d7d11600160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600201546040516124f191906159f6565b60405180910390a250565b61250581611502565b612544576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161253b906159a6565b60405180910390fd5b3373ffffffffffffffffffffffffffffffffffffffff16600160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060030160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614612614576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161260b90615966565b60405180910390fd5b60003390506000600160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600001549050600160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600080820160009055600182016000905560028201600090556003820160006101000a81549073ffffffffffffffffffffffffffffffffffffffff02191690556003820160146101000a81549060ff021916905550508173ffffffffffffffffffffffffffffffffffffffff166108fc829081150290604051600060405180830381858888f1935050505015801561273b573d6000803e3d6000fd5b508273ffffffffffffffffffffffffffffffffffffffff167f0f5bb82176feb1b5e747e28471aa92156a04d9f3ab9f45f28e2d704232b93f758260405161278291906159f6565b60405180910390a2505050565b6060816040516020016127a291906155a9565b60405160208183030381529060405290508051602082018181fd5b6000816040516020016127d0919061524d565b604051602081830303815290604052805190602001209050919050565b6000604182511461280157600090506128d3565b60008060006020850151925060408501519150606085015160001a90507f7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a08260001c111561285557600093505050506128d3565b601b8160ff161415801561286d5750601c8160ff1614155b1561287e57600093505050506128d3565b600186828585604051600081526020016040526040516128a19493929190615504565b6020604051602081039080840390855afa1580156128c3573d6000803e3d6000fd5b5050506020604051035193505050505b92915050565b6128e1613b83565b6128ea826134d3565b809050866000018760200188604001896060018a6080018b60a001869052868152508673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815250868152508681525086815250505050505050809050919050565b60006129638260006135b5565b60001b9050919050565b6001600381111561297a57fe5b600160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060030160149054906101000a900460ff1660038111156129d557fe5b1480612a465750600260038111156129e957fe5b600160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060030160149054906101000a900460ff166003811115612a4457fe5b145b80612ab55750600380811115612a5857fe5b600160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060030160149054906101000a900460ff166003811115612ab357fe5b145b612af4576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612aeb906158a6565b60405180910390fd5b6000600160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000015490506000612b488260026135cf565b90506000612b56838361362b565b905060026003811115612b6557fe5b600160008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060030160149054906101000a900460ff166003811115612bc057fe5b1415612c15578373ffffffffffffffffffffffffffffffffffffffff167f5490afc1d818789c8b3d5d63bce3d2a3327d0bba4efb5a7751f783dc977d7d1142604051612c0c91906159f6565b60405180910390a25b600160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600080820160009055600182016000905560028201600090556003820160006101000a81549073ffffffffffffffffffffffffffffffffffffffff02191690556003820160146101000a81549060ff02191690555050600073ffffffffffffffffffffffffffffffffffffffff166108fc839081150290604051600060405180830381858888f19350505050158015612cf1573d6000803e3d6000fd5b5060003390508073ffffffffffffffffffffffffffffffffffffffff166108fc839081150290604051600060405180830381858888f19350505050158015612d3d573d6000803e3d6000fd5b508473ffffffffffffffffffffffffffffffffffffffff167fb0595266ccec357806b2691f348b128209f1060a0bda4f5c95f7090730351ff88284604051612d8692919061530c565b60405180910390a25050505050565b60006004820183511015612dde576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612dd590615946565b60405180910390fd5b6020820191508183015190507fffffffff000000000000000000000000000000000000000000000000000000008116905080905092915050565b60026003811115612e2557fe5b60016000846000015173ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060030160149054906101000a900460ff166003811115612e8457fe5b14612ec4576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612ebb90615886565b60405180910390fd5b3a8260a001511115612f0b576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612f02906156e6565b60405180910390fd5b620186a0612f1d828460c0015161362b565b1015612f5e576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612f55906155e6565b60405180910390fd5b60026000836040015173ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054818360a00151021115612fea576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612fe190615786565b60405180910390fd5b6000613028836000015184602001518560400151866060015187608001518860a001518960c001518a60e001518b61010001518c6101200151610d17565b90506000600481111561303757fe5b81146130d257826040015173ffffffffffffffffffffffffffffffffffffffff16836020015173ffffffffffffffffffffffffffffffffffffffff16846000015173ffffffffffffffffffffffffffffffffffffffff167fafb5afd6d1c2e8ffbfb480e674a169f493ece0b22658d4f4484e7334f0241e22866101400151856040516130c4929190615580565b60405180910390a45061345d565b50600080836020015173ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000815480929190600101919050555060603073ffffffffffffffffffffffffffffffffffffffff166322741d3360e01b84846040516024016131599291906159c6565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff83818316178352505050506040516131c3919061519c565b6000604051808303816000865af19150503d8060008114613200576040519150601f19603f3d011682016040523d82523d6000602084013e613205565b606091505b5091505060008180602001905161321f9190810190614393565b9050600061323c5a8561c31001038660a001518760800151613461565b90508060026000876040015173ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205410156132c4576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016132bb90615606565b60405180910390fd5b8060026000876040015173ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282540392505081905550806002600060016000896000015173ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060030160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282540192505081905550846040015173ffffffffffffffffffffffffffffffffffffffff16856020015173ffffffffffffffffffffffffffffffffffffffff16866000015173ffffffffffffffffffffffffffffffffffffffff167fab74390d395916d9e0006298d47938a5def5d367054dcca78fa6ec84381f3f22886101400151868660405161345193929190615549565b60405180910390a45050505b5050565b6000606482606401848602028161347457fe5b0490509392505050565b6000808284019050838110156134c9576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016134c090615666565b60405180910390fd5b8091505092915050565b60008060008060006060806134ef6134ea89613681565b6136d8565b905061350e8160008151811061350157fe5b60200260200101516137e5565b61352b8260018151811061351e57fe5b60200260200101516137e5565b6135488360028151811061353b57fe5b60200260200101516137e5565b6135658460038151811061355857fe5b6020026020010151613828565b6135828560048151811061357557fe5b60200260200101516137e5565b61359f8660058151811061359257fe5b6020026020010151613882565b9650965096509650965096505091939550919395565b60006135c183836138fd565b60001c905080905092915050565b6000808211613613576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161360a90615766565b60405180910390fd5b600082848161361e57fe5b0490508091505092915050565b600082821115613670576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161366790615726565b60405180910390fd5b600082840390508091505092915050565b613689613c91565b6000825114156136b157604051806040016040528060008152602001600081525090506136d3565b6000602083019050604051806040016040528084518152602001828152509150505b919050565b60606136e38261395b565b613722576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401613719906158c6565b60405180910390fd5b600061372d83613994565b90508060405190808252806020026020018201604052801561376957816020015b613756613cab565b81526020019060019003908161374e5790505b509150600061377b84602001516139ef565b8460200151019050600080600090505b838110156137dc5761379c83613a78565b91506040518060400160405280838152602001848152508582815181106137bf57fe5b60200260200101819052508183019250808060010191505061378b565b50505050919050565b6000806137f583602001516139ef565b9050600081846000015103905060008285602001510190506000826020036101000a825104905080945050505050919050565b6000601582600001511115613872576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401613869906156a6565b60405180910390fd5b61387b826137e5565b9050919050565b6060600061389383602001516139ef565b905060008184600001510390506060816040519080825280601f01601f1916602001820160405280156138d55781602001600182028038833980820191505090505b50905060008160200190506138f1848760200151018285613b2b565b81945050505050919050565b60006020820183511015613946576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161393d906156c6565b60405180910390fd5b60208201915081830151905080905092915050565b600080600083602001519050805160001a915060c060ff168260ff1610156139885760009250505061398f565b6001925050505b919050565b6000806000905060006139aa84602001516139ef565b84602001510190506000846000015185602001510190505b808210156139e4576139d382613a78565b8201915082806001019350506139c2565b829350505050919050565b600080825160001a9050608060ff16811015613a0f576000915050613a73565b60b860ff16811080613a34575060c060ff168110158015613a33575060f860ff1681105b5b15613a43576001915050613a73565b60c060ff16811015613a635760018060b80360ff16820301915050613a73565b60018060f80360ff168203019150505b919050565b600080825160001a9050608060ff16811015613a98576001915050613b26565b60b860ff16811015613ab6576001608060ff16820301915050613b26565b60c060ff16811015613ae65760b78103600184019350806020036101000a84510460018201810193505050613b24565b60f860ff16811015613b0457600160c060ff16820301915050613b26565b60f78103600184019350806020036101000a845104600182018101935050505b505b919050565b5b602060ff168110613b5b5782518252602060ff1683019250602060ff1682019150602060ff1681039050613b2c565b6000600182602060ff16036101000a0390508019845116818451168181178552505050505050565b6040518060c00160405280600081526020016000815260200160008152602001600073ffffffffffffffffffffffffffffffffffffffff16815260200160008152602001606081525090565b604051806101800160405280600073ffffffffffffffffffffffffffffffffffffffff168152602001600073ffffffffffffffffffffffffffffffffffffffff168152602001600073ffffffffffffffffffffffffffffffffffffffff1681526020016060815260200160008152602001600081526020016000815260200160008152602001606081526020016060815260200160007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19168152602001600081525090565b604051806040016040528060008152602001600081525090565b604051806040016040528060008152602001600081525090565b600081359050613cd481615dce565b92915050565b600081519050613ce981615de5565b92915050565b600081359050613cfe81615dfc565b92915050565b600082601f830112613d1557600080fd5b8135613d28613d2382615b06565b615ad9565b91508082526020830160208301858383011115613d4457600080fd5b613d4f838284615d1c565b50505092915050565b600082601f830112613d6957600080fd5b8135613d7c613d7782615b32565b615ad9565b91508082526020830160208301858383011115613d9857600080fd5b613da3838284615d1c565b50505092915050565b600081519050613dbb81615e13565b92915050565b600082601f830112613dd257600080fd5b8135613de5613de082615b5e565b615ad9565b91508082526020830160208301858383011115613e0157600080fd5b613e0c838284615d1c565b50505092915050565b60006101808284031215613e2857600080fd5b613e33610180615ad9565b90506000613e4384828501613cc5565b6000830152506020613e5784828501613cc5565b6020830152506040613e6b84828501613cc5565b604083015250606082013567ffffffffffffffff811115613e8b57600080fd5b613e9784828501613d04565b6060830152506080613eab84828501613f7b565b60808301525060a0613ebf84828501613f7b565b60a08301525060c0613ed384828501613f7b565b60c08301525060e0613ee784828501613f7b565b60e08301525061010082013567ffffffffffffffff811115613f0857600080fd5b613f1484828501613d04565b6101008301525061012082013567ffffffffffffffff811115613f3657600080fd5b613f4284828501613d04565b61012083015250610140613f5884828501613cef565b61014083015250610160613f6e84828501613f7b565b6101608301525092915050565b600081359050613f8a81615e23565b92915050565b600081519050613f9f81615e23565b92915050565b600060208284031215613fb757600080fd5b6000613fc584828501613cc5565b91505092915050565b6000806000806000806000806000806101408b8d031215613fee57600080fd5b6000613ffc8d828e01613cc5565b9a5050602061400d8d828e01613cc5565b995050604061401e8d828e01613cc5565b98505060608b013567ffffffffffffffff81111561403b57600080fd5b6140478d828e01613d58565b97505060806140588d828e01613f7b565b96505060a06140698d828e01613f7b565b95505060c061407a8d828e01613f7b565b94505060e061408b8d828e01613f7b565b9350506101008b013567ffffffffffffffff8111156140a957600080fd5b6140b58d828e01613d58565b9250506101208b013567ffffffffffffffff8111156140d357600080fd5b6140df8d828e01613d58565b9150509295989b9194979a5092959850565b60008060008060008060008060006101208a8c03121561411057600080fd5b600061411e8c828d01613cc5565b995050602061412f8c828d01613cc5565b98505060408a013567ffffffffffffffff81111561414c57600080fd5b6141588c828d01613d58565b97505060606141698c828d01613f7b565b965050608061417a8c828d01613f7b565b95505060a061418b8c828d01613f7b565b94505060c061419c8c828d01613f7b565b93505060e08a013567ffffffffffffffff8111156141b957600080fd5b6141c58c828d01613d58565b9250506101008a013567ffffffffffffffff8111156141e357600080fd5b6141ef8c828d01613d58565b9150509295985092959850929598565b6000806040838503121561421257600080fd5b600061422085828601613cc5565b925050602061423185828601613f7b565b9150509250929050565b60006020828403121561424d57600080fd5b600061425b84828501613cda565b91505092915050565b6000806040838503121561427757600080fd5b600083013567ffffffffffffffff81111561429157600080fd5b61429d85828601613d58565b925050602083013567ffffffffffffffff8111156142ba57600080fd5b6142c685828601613d58565b9150509250929050565b600080600080608085870312156142e657600080fd5b600085013567ffffffffffffffff81111561430057600080fd5b61430c87828801613d58565b945050602085013567ffffffffffffffff81111561432957600080fd5b61433587828801613d58565b935050604085013567ffffffffffffffff81111561435257600080fd5b61435e87828801613d58565b925050606085013567ffffffffffffffff81111561437b57600080fd5b61438787828801613d58565b91505092959194509250565b6000602082840312156143a557600080fd5b60006143b384828501613dac565b91505092915050565b600080604083850312156143cf57600080fd5b600083013567ffffffffffffffff8111156143e957600080fd5b6143f585828601613e15565b925050602061440685828601613f7b565b9150509250929050565b60006020828403121561442257600080fd5b600061443084828501613f7b565b91505092915050565b60006020828403121561444b57600080fd5b600061445984828501613f90565b91505092915050565b6000806040838503121561447557600080fd5b600061448385828601613f7b565b925050602083013567ffffffffffffffff8111156144a057600080fd5b6144ac85828601613dc1565b9150509250929050565b6000806000606084860312156144cb57600080fd5b60006144d986828701613f7b565b93505060206144ea86828701613f7b565b92505060406144fb86828701613f7b565b9150509250925092565b61450e81615cc2565b82525050565b61451d81615c11565b82525050565b61452c81615bff565b82525050565b61453b81615bff565b82525050565b61455261454d82615bff565b615d5e565b82525050565b61456181615c23565b82525050565b61457081615c2f565b82525050565b61458761458282615c2f565b615d70565b82525050565b61459681615c39565b82525050565b6145a581615c39565b82525050565b60006145b682615b95565b6145c08185615bc7565b93506145d0818560208601615d2b565b6145d981615d96565b840191505092915050565b60006145ef82615b95565b6145f98185615bd8565b9350614609818560208601615d2b565b80840191505092915050565b600061462082615b8a565b61462a8185615bb6565b935061463a818560208601615d2b565b61464381615d96565b840191505092915050565b600061465982615b8a565b6146638185615bc7565b9350614673818560208601615d2b565b61467c81615d96565b840191505092915050565b600061469282615b8a565b61469c8185615bd8565b93506146ac818560208601615d2b565b80840191505092915050565b6146c181615cd4565b82525050565b6146d081615ce6565b82525050565b60006146e182615bab565b6146eb8185615be3565b93506146fb818560208601615d2b565b61470481615d96565b840191505092915050565b600061471a82615ba0565b6147248185615be3565b9350614734818560208601615d2b565b61473d81615d96565b840191505092915050565b6000614755601483615be3565b91507f4e6f7420656e6f756768206761736c65667428290000000000000000000000006000830152602082019050919050565b6000614795601c83615bf4565b91507f19457468657265756d205369676e6564204d6573736167653a0a3332000000006000830152601c82019050919050565b60006147d5601383615be3565b91507f53686f756c64206e6f74206765742068657265000000000000000000000000006000830152602082019050919050565b6000614815601783615be3565b91507f4c6567616c2072656c6179207472616e73616374696f6e0000000000000000006000830152602082019050919050565b6000614855602783615be3565b91507f4f6e6c792052656c61794875622073686f756c642063616c6c2074686973206660008301527f756e6374696f6e000000000000000000000000000000000000000000000000006020830152604082019050919050565b60006148bb601b83615be3565b91507f536166654d6174683a206164646974696f6e206f766572666c6f7700000000006000830152602082019050919050565b60006148fb601d83615be3565b91507f72656c61792063616e6e6f74207374616b6520666f7220697473656c660000006000830152602082019050919050565b600061493b603a83615be3565b91507f496e76616c696420524c504974656d2e2041646472657373657320617265206560008301527f6e636f64656420696e203230206279746573206f72206c6573730000000000006020830152604082019050919050565b60006149a1602683615be3565b91507f475245415445525f4f525f455155414c5f544f5f33325f4c454e4754485f524560008301527f51554952454400000000000000000000000000000000000000000000000000006020830152604082019050919050565b6000614a07601183615be3565b91507f496e76616c6964206761732070726963650000000000000000000000000000006000830152602082019050919050565b6000614a47600f83615be3565b91507f6465706f73697420746f6f2062696700000000000000000000000000000000006000830152602082019050919050565b6000614a87601e83615be3565b91507f536166654d6174683a207375627472616374696f6e206f766572666c6f7700006000830152602082019050919050565b6000614ac7601883615be3565b91507f64656c6179206c6f776572207468616e206d696e696d756d00000000000000006000830152602082019050919050565b6000614b07601a83615be3565b91507f536166654d6174683a206469766973696f6e206279207a65726f0000000000006000830152602082019050919050565b6000614b47601983615be3565b91507f526563697069656e742062616c616e636520746f6f206c6f77000000000000006000830152602082019050919050565b6000614b87600f83615be3565b91507f446966666572656e74206e6f6e636500000000000000000000000000000000006000830152602082019050919050565b6000614bc7601583615be3565b91507f77726f6e6720737461746520666f72207374616b6500000000000000000000006000830152602082019050919050565b6000614c07602083615be3565b91507f756e7374616b6544656c61792063616e6e6f74206265206465637265617365646000830152602082019050919050565b6000614c47601083615be3565b91507f446966666572656e74207369676e6572000000000000000000000000000000006000830152602082019050919050565b6000614c87601983615be3565b91507f64656c617920686967686572207468616e206d6178696d756d000000000000006000830152602082019050919050565b6000614cc7600b83615be3565b91507f747820697320657175616c0000000000000000000000000000000000000000006000830152602082019050919050565b6000614d07601a83615be3565b91507f62616c616e6365206c6f776572207468616e206d696e696d756d0000000000006000830152602082019050919050565b6000614d47600d83615be3565b91507f556e6b6e6f776e2072656c6179000000000000000000000000000000000000006000830152602082019050919050565b6000614d87600483615bf4565b91507f726c783a000000000000000000000000000000000000000000000000000000006000830152600482019050919050565b6000614dc7600e83615be3565b91507f556e7374616b65642072656c61790000000000000000000000000000000000006000830152602082019050919050565b6000614e07600d83615be3565b91507f69734c697374206661696c6564000000000000000000000000000000000000006000830152602082019050919050565b6000614e47601883615be3565b91507f7374616b65206c6f776572207468616e206d696e696d756d00000000000000006000830152602082019050919050565b6000614e87601283615be3565b91507f696e73756666696369656e742066756e647300000000000000000000000000006000830152602082019050919050565b6000614ec7600f83615be3565b91507f616c72656164792072656d6f76656400000000000000000000000000000000006000830152602082019050919050565b6000614f07602583615be3565b91507f475245415445525f4f525f455155414c5f544f5f345f4c454e4754485f52455160008301527f55495245440000000000000000000000000000000000000000000000000000006020830152604082019050919050565b6000614f6d600983615be3565b91507f6e6f74206f776e657200000000000000000000000000000000000000000000006000830152602082019050919050565b6000614fad602383615be3565b91507f436f6e7472616374732063616e6e6f742072656769737465722061732072656c60008301527f61797300000000000000000000000000000000000000000000000000000000006020830152604082019050919050565b6000615013601183615be3565b91507f63616e556e7374616b65206661696c65640000000000000000000000000000006000830152602082019050919050565b60006101808301600083015161505f6000860182614523565b5060208301516150726020860182614523565b5060408301516150856040860182614523565b506060830151848203606086015261509d8282614615565b91505060808301516150b26080860182615158565b5060a08301516150c560a0860182615158565b5060c08301516150d860c0860182615158565b5060e08301516150eb60e0860182615158565b506101008301518482036101008601526151058282614615565b9150506101208301518482036101208601526151218282614615565b91505061014083015161513861014086018261458d565b5061016083015161514d610160860182615158565b508091505092915050565b61516181615cab565b82525050565b61517081615cab565b82525050565b61518761518282615cab565b615d8c565b82525050565b61519681615cb5565b82525050565b60006151a882846145e4565b915081905092915050565b60006151bf82856145e4565b91506151cb8284614541565b6014820191508190509392505050565b60006151e78285614687565b91506151f38284614541565b6014820191508190509392505050565b600061520f8287614687565b915061521b8286615176565b60208201915061522b8285614541565b60148201915061523b8284615176565b60208201915081905095945050505050565b600061525882614788565b91506152648284614576565b60208201915081905092915050565b600061527e82614d7a565b915061528a828b614541565b60148201915061529a828a614541565b6014820191506152aa82896145e4565b91506152b68288615176565b6020820191506152c68287615176565b6020820191506152d68286615176565b6020820191506152e68285615176565b6020820191506152f68284614541565b6014820191508190509998505050505050505050565b60006040820190506153216000830185614505565b61532e6020830184615167565b9392505050565b60006101208201905061534b600083018c614532565b615358602083018b614532565b818103604083015261536a818a6145ab565b90506153796060830189615167565b6153866080830188615167565b61539360a0830187615167565b6153a060c0830186615167565b81810360e08301526153b281856145ab565b90506153c2610100830184615167565b9a9950505050505050505050565b600060e0820190506153e5600083018a614532565b6153f26020830189614532565b8181036040830152615404818861464e565b90506154136060830187615167565b6154206080830186615167565b61542d60a0830185615167565b61543a60c0830184615167565b98975050505050505050565b60006101408201905061545c600083018d614532565b615469602083018c614532565b818103604083015261547b818b61464e565b905061548a606083018a615167565b6154976080830189615167565b6154a460a0830188615167565b6154b160c0830187615167565b6154be60e0830186615167565b6154cc610100830185614558565b6154da610120830184614567565b9b9a5050505050505050505050565b60006020820190506154fe6000830184614558565b92915050565b60006080820190506155196000830187614567565b615526602083018661518d565b6155336040830185614567565b6155406060830184614567565b95945050505050565b600060608201905061555e600083018661459c565b61556b60208301856146b8565b6155786040830184615167565b949350505050565b6000604082019050615595600083018561459c565b6155a26020830184615167565b9392505050565b60006020820190506155be60008301846146b8565b92915050565b600060208201905081810360008301526155de818461470f565b905092915050565b600060208201905081810360008301526155ff81614748565b9050919050565b6000602082019050818103600083015261561f816147c8565b9050919050565b6000602082019050818103600083015261563f81614808565b9050919050565b6000602082019050818103600083015261565f81614848565b9050919050565b6000602082019050818103600083015261567f816148ae565b9050919050565b6000602082019050818103600083015261569f816148ee565b9050919050565b600060208201905081810360008301526156bf8161492e565b9050919050565b600060208201905081810360008301526156df81614994565b9050919050565b600060208201905081810360008301526156ff816149fa565b9050919050565b6000602082019050818103600083015261571f81614a3a565b9050919050565b6000602082019050818103600083015261573f81614a7a565b9050919050565b6000602082019050818103600083015261575f81614aba565b9050919050565b6000602082019050818103600083015261577f81614afa565b9050919050565b6000602082019050818103600083015261579f81614b3a565b9050919050565b600060208201905081810360008301526157bf81614b7a565b9050919050565b600060208201905081810360008301526157df81614bba565b9050919050565b600060208201905081810360008301526157ff81614bfa565b9050919050565b6000602082019050818103600083015261581f81614c3a565b9050919050565b6000602082019050818103600083015261583f81614c7a565b9050919050565b6000602082019050818103600083015261585f81614cba565b9050919050565b6000602082019050818103600083015261587f81614cfa565b9050919050565b6000602082019050818103600083015261589f81614d3a565b9050919050565b600060208201905081810360008301526158bf81614dba565b9050919050565b600060208201905081810360008301526158df81614dfa565b9050919050565b600060208201905081810360008301526158ff81614e3a565b9050919050565b6000602082019050818103600083015261591f81614e7a565b9050919050565b6000602082019050818103600083015261593f81614eba565b9050919050565b6000602082019050818103600083015261595f81614efa565b9050919050565b6000602082019050818103600083015261597f81614f60565b9050919050565b6000602082019050818103600083015261599f81614fa0565b9050919050565b600060208201905081810360008301526159bf81615006565b9050919050565b600060408201905081810360008301526159e08185615046565b90506159ef6020830184615167565b9392505050565b6000602082019050615a0b6000830184615167565b92915050565b6000604082019050615a266000830185615167565b615a336020830184615167565b9392505050565b600060a082019050615a4f6000830188615167565b615a5c6020830187615167565b615a696040830186615167565b615a766060830185614514565b615a8360808301846146c7565b9695505050505050565b6000608082019050615aa26000830187615167565b615aaf6020830186615167565b615abc6040830185615167565b8181036060830152615ace81846146d6565b905095945050505050565b6000604051905081810181811067ffffffffffffffff82111715615afc57600080fd5b8060405250919050565b600067ffffffffffffffff821115615b1d57600080fd5b601f19601f8301169050602081019050919050565b600067ffffffffffffffff821115615b4957600080fd5b601f19601f8301169050602081019050919050565b600067ffffffffffffffff821115615b7557600080fd5b601f19601f8301169050602081019050919050565b600081519050919050565b600081519050919050565b600081519050919050565b600081519050919050565b600082825260208201905092915050565b600082825260208201905092915050565b600081905092915050565b600082825260208201905092915050565b600081905092915050565b6000615c0a82615c8b565b9050919050565b6000615c1c82615c8b565b9050919050565b60008115159050919050565b6000819050919050565b60007fffffffff0000000000000000000000000000000000000000000000000000000082169050919050565b6000819050615c7382615db4565b919050565b6000819050615c8682615dc1565b919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b600060ff82169050919050565b6000615ccd82615cf8565b9050919050565b6000615cdf82615c65565b9050919050565b6000615cf182615c78565b9050919050565b6000615d0382615d0a565b9050919050565b6000615d1582615c8b565b9050919050565b82818337600083830152505050565b60005b83811015615d49578082015181840152602081019050615d2e565b83811115615d58576000848401525b50505050565b6000615d6982615d7a565b9050919050565b6000819050919050565b6000615d8582615da7565b9050919050565b6000819050919050565b6000601f19601f8301169050919050565b60008160601b9050919050565b60058110615dbe57fe5b50565b60048110615dcb57fe5b50565b615dd781615bff565b8114615de257600080fd5b50565b615dee81615c2f565b8114615df957600080fd5b50565b615e0581615c39565b8114615e1057600080fd5b50565b60058110615e2057600080fd5b50565b615e2c81615cab565b8114615e3757600080fd5b5056fea365627a7a723058202797a60d3c1c20b6ef0eb045e11957fafe380b96159b04be9dcd3a9da3c309156c6578706572696d656e74616cf564736f6c634300050a0040"

	if _, err = hex.DecodeString(RelayHubBin[2:]); err != nil {
		log.Println("RelayHubBin", RelayHubBin)
		log.Fatalln("Invalid hex: RelayHubBin", err)
	}
	rhaddr, _, boundHub, err = bind.DeployContract(auth, parsed, common.FromHex(RelayHubBin), client)
	if err != nil {
		log.Fatalf("could not deploy contract: %v", err)
	}
	parsed, err = abi.JSON(strings.NewReader(samplerec.SampleRecipientABI))
	if err != nil {
		log.Fatalln(err)
	}
	auth.GasLimit = 3000000
	sampleRecipient, _, boundRecipient, err = bind.DeployContract(auth, parsed, common.FromHex(samplerec.SampleRecipientBin), client, rhaddr)
	if err != nil {
		log.Fatalln("Error deploying SampleRecipient contract:", err)
	}
	rhub, err = librelay.NewIRelayHub(rhaddr, client)
	if err != nil {
		log.Fatalln(err)
	}
	fmt.Printf("RelayHub:  %s\nRecipient: %s\n", rhaddr.String(), sampleRecipient.String())
	NewRelay(rhaddr)

	tx, err := relay.sendStakeTransaction(ownerKey3)
	if err != nil {
		log.Fatalf("Could not 'sendStakeTransaction': %v", err)
	}
	client.Commit()
	err = relay.awaitTransactionMined(tx)
	if err != nil {
		log.Fatalln(err)
	}

	auth := bind.NewKeyedTransactor(ownerKey3)
	auth.Value = big.NewInt(1)
	auth.Value.Lsh(auth.Value, 40)

	tx, err = rhub.DepositFor(auth, sampleRecipient)
	client.Commit()
	if err != nil {
		log.Fatalln(err)
	}
	_, _ = client.TransactionReceipt(context.Background(), tx.Hash())

	callOpt := &bind.CallOpts{}
	toBalance, err := rhub.BalanceOf(callOpt, sampleRecipient)
	if err != nil {
		log.Println(err)
		return
	}
	log.Println("To.balance: ", toBalance)

	fmt.Println("-----------------------------------------------------")
	flag.Parse()
	exitStatus := m.Run()
	defer os.Exit(exitStatus)
}

func TestRefreshGasPrice(t *testing.T) {
	gasPriceBefore := relay.GasPrice()
	test.ErrFail(relay.RefreshGasPrice(), t)
	gasPriceAfter := relay.GasPrice()
	if gasPriceBefore.Cmp(big.NewInt(0)) != 0 {
		t.Error()
	}
	// Gas price is ganache default plus 10% specified in relay constructor
	if gasPriceAfter.Cmp(big.NewInt(1100)) != 0 {
		t.Error("Gas price after is", gasPriceAfter.Uint64())
	}
}

func TestRegisterRelay(t *testing.T) {
	staked, err := relay.IsStaked()
	if !staked {
		t.Error("Relay is not staked")
	}
	test.ErrFail(err, t)
	// TODO: Watch out for FLICKERING: attempt to AdjustTime ahead of machine clock will have no effect at all
	err = client.AdjustTime(50)
	client.Commit()
	tx, err := relay.sendRegisterTransaction()
	test.ErrFail(err, t)
	if err != nil {
		fmt.Println("ERROR", err)
	}
	client.Commit()
	test.ErrFail(relay.awaitTransactionMined(tx), t)
	when, err := relay.RegistrationDate()
	if err != nil {
		fmt.Println("ERROR", err)
	}
	if time.Now().Unix()-when > int64((1 * time.Minute).Seconds()) {
		t.Error("Wrong registration time/date", time.Now().Unix(), when)
	}
}

func printSignature(txb string, txFee int64, gasPrice int64, gasLimit int64, relayMaxNonce int64, recipientNonce int64) {
	fmt.Println("ganache-cli -d")
	fmt.Println("npx truffle console --network development")
	fmt.Println("const utils = require('../src/js/relayclient/utils')")
	fmt.Printf(
		"let hash = utils.getTransactionHash('%v', '%v', '%v', '%v', '%v', '%v', '%v', '%v', '%v')\n",
		crypto.PubkeyToAddress(gaslessKey2.PublicKey).Hex(), sampleRecipient.Hex(), txb, txFee, gasPrice, gasLimit, recipientNonce, rhaddr.Hex(), relay.Address().Hex(),
	)
	fmt.Printf("utils.getTransactionSignature(web3, '0xffcf8fdee72ac11b5c542428b35eef5769c409f0', hash)\n")
}

func newRelayTransactionRequest(t *testing.T, recipientNonce int64, signature string) (request RelayTransactionRequest) {
	test.ErrFail(relay.RefreshGasPrice(), t)
	addressGasless := crypto.PubkeyToAddress(gaslessKey2.PublicKey)
	txb := "0x2ac0df260000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000000b68656c6c6f20776f726c64000000000000000000000000000000000000000000"
	txFee := int64(10)
	gasPrice := int64(2000)
	gasLimit := int64(1000000)
	relayMaxNonce := int64(1000000)
	if signature[:2] == "0x" {
		signature = signature[2:]
	}

	// Uncomment the following line to print the commands to generate the signature that needs to be injected
	// printSignature(txb, txFee, gasPrice, gasLimit, relayMaxNonce, recipientNonce)

	return RelayTransactionRequest{
		EncodedFunction: txb,
		ApprovalData:		 common.Hex2Bytes(""),
		Signature:       common.Hex2Bytes(signature),
		From:            addressGasless,
		To:              sampleRecipient,
		GasPrice:        *big.NewInt(gasPrice),
		GasLimit:        *big.NewInt(gasLimit),
		RecipientNonce:  *big.NewInt(recipientNonce),
		RelayMaxNonce:   *big.NewInt(relayMaxNonce),
		RelayFee:        *big.NewInt(txFee),
		RelayHubAddress: rhaddr,
	}
}

func assertTransactionRelayed(t *testing.T, txHash common.Hash) (receipt *types.Receipt) {
	receipt, err := client.TransactionReceipt(context.Background(), txHash)
	test.ErrFailWithDesc(err, t, fmt.Sprint("Fetching transaction receipt for hash ", txHash.Hex()))
	logsLen := len(receipt.Logs)
	expectedLogs := 4
	if logsLen != expectedLogs {
		t.Errorf("Incorrect logs len: expected %d, actual: %d", expectedLogs, logsLen)
	}
	transactionRelayedEvent := new(librelay.IRelayHubTransactionRelayed)
	sampleRecipientEmitted := new(samplerec.SampleRecipientSampleRecipientEmitted)
	preRelayedEmitted := new(samplerec.SampleRecipientSampleRecipientPreCall)
	postRelayedEmitted := new(samplerec.SampleRecipientSampleRecipientPostCall)
	test.ErrFailWithDesc(boundRecipient.UnpackLog(preRelayedEmitted, "SampleRecipientPreCall", *receipt.Logs[0]), t, "Unpacking SampleRecipientPreCall")
	test.ErrFailWithDesc(boundRecipient.UnpackLog(sampleRecipientEmitted, "SampleRecipientEmitted", *receipt.Logs[1]), t, "Unpacking sample recipient emitted")
	test.ErrFailWithDesc(boundRecipient.UnpackLog(postRelayedEmitted, "SampleRecipientPostCall", *receipt.Logs[2]), t, "Unpacking SampleRecipientPostCall")
	test.ErrFailWithDesc(boundHub.UnpackLog(transactionRelayedEvent, "TransactionRelayed", *receipt.Logs[3]), t, "Unpacking transaction relayed")

	expectedMessage := "hello world"
	if sampleRecipientEmitted.Message != expectedMessage {
		t.Errorf("Message was not what expected! expected: %s actual: %s", expectedMessage, sampleRecipientEmitted.Message)
	}
	return receipt
}

func assertRelayNonce(t *testing.T, expected uint64) {
	nonce, err := client.NonceAt(context.Background(), relay.Address(), nil)
	if nonce != expected || err != nil {
		t.Errorf("Relay nonce is %v but expected %v (error %v)", nonce, expected, err)
	}
}

func assertNoTransactionResent(t *testing.T, relay *RelayServer) {
	noTx, err := relay.UpdateUnconfirmedTransactions()
	test.ErrFailWithDesc(err, t, "Updating unconfirmed transactions")
	if noTx != nil {
		t.Errorf("Expected no tx to be resent upon updating unconfirmed txs, but %v with nonce %v was resent", noTx.Hash().Hex(), noTx.Nonce())
	}
}

func TestCreateRelayTransaction(t *testing.T) {
	request := newRelayTransactionRequest(t, 0, "0x8d48d0f3416480011e4556d3dfbb4ef534632a2936b4169fc134fa17403693df354e888558439101e4fdec242acad39b2bd6d6a927842b9f311eba822a5b3d501b")
	signedTx, err := relay.CreateRelayTransaction(request)
	test.ErrFailWithDesc(err, t, "Creating relay transaction")
	client.Commit()
	assertTransactionRelayed(t, signedTx.Hash())
}

func TestResendRelayTransaction(t *testing.T) {
	test.ErrFail(relay.TxStore.Clear(), t)
	request := newRelayTransactionRequest(t, 1, "0x5f94ad28a24e38262824f47c6d329796886d7b282c6482e62a646b18aa9eb5ba6ec14cd6cd24463e2799c225c44b58bd84b66e314902d0c409b58c3e3e77d06b1c")

	// Send a transaction via the relay, but then revert to a previous snapshot
	snapshotID, err := client.Snapshot()
	test.ErrFailWithDesc(err, t, "Creating snapshot")
	signedTx, err := relay.CreateRelayTransaction(request)
	test.ErrFailWithDesc(err, t, "Creating relay transaction")
	err = client.Revert(snapshotID)
	test.ErrFailWithDesc(err, t, "Restoring snapshot")

	// Ensure tx is removed by the revert
	_, err = client.TransactionReceipt(context.Background(), signedTx.Hash())
	if err != ethereum.NotFound {
		t.Errorf("Transaction %v should not have been found (error %v)", signedTx.Hash().Hex(), err)
	}

	// Should not do anything, as not enough time has passed
	clk.IncrementBySeconds(1 * 60)
	assertNoTransactionResent(t, relay.RelayServer)
	sameTx, err := relay.TxStore.GetFirstTransaction()
	if sameTx.Hash() != signedTx.Hash() {
		t.Errorf("Transaction should not have been resent if less than 5 minutes passed: original tx %v but loaded from store was %v", signedTx.Hash().Hex(), sameTx.Hash().Hex())
	}
	_, err = client.TransactionReceipt(context.Background(), sameTx.Hash())
	if err != ethereum.NotFound {
		t.Errorf("Transaction %v should not have been found (error %v)", sameTx.Hash().Hex(), err)
	}

	// Advance time
	clk.IncrementBySeconds(6 * 60)
	newTx, err := relay.UpdateUnconfirmedTransactions()
	test.ErrFailWithDesc(err, t, "Updating unconfirmed transactions")

	// Check transaction was now sent with increased gas price
	client.MineBlocks(2)
	assertTransactionRelayed(t, newTx.Hash())
	if newTx.GasPrice().Int64() != 2400 {
		t.Errorf("Gas price of resent transaction is incorrect: expected %v but was %v", 2400, newTx.GasPrice().Int64())
	}

	// Check the tx is removed from the store after enough blocks
	client.MineBlocks(12)
	assertNoTransactionResent(t, relay.RelayServer)
	missingTx, err := relay.TxStore.GetFirstTransaction()
	if missingTx != nil || err != nil {
		t.Errorf("Transaction %v was not removed from store after 12 confirmations (error %v)", missingTx.Hash().Hex(), err)
	}
}

func TestMultipleRelayTransactions(t *testing.T) {
	test.ErrFail(relay.TxStore.Clear(), t)
	request1 := newRelayTransactionRequest(t, 2, "0xa1a5580b9974a0a2a54e33e5c82f2cb913656e6b65a5381e20ef3b94e6f0d4280d62b78be4504ad32fce1575fc6f4eb8cfd6fcd4a9e8d919cf9867222ab108bf1b")
	request2 := newRelayTransactionRequest(t, 3, "0xd6b2df0a5fe28710646e5dff18e8166264b829b199c7e07c7913aeb98fbf15416461406e6bf38c7e897456567122bbdb04b1493622801dac7379a9b74f2589851b")
	request3 := newRelayTransactionRequest(t, 4, "0x0495a8eec6689e04d4712c188f66dc3bb18497c8f5e3e86460f429eb97ea626761d92c43ecfb93bdda77b482b1904e7667e4df1dd3ebe03e9a27abbed42b287d1b")

	// Send 3 transactions, separated by 1 min each, and revert the last 2
	signedTx1, err := relay.CreateRelayTransaction(request1)
	test.ErrFailWithDesc(err, t, "Creating relay transaction 1")
	clk.IncrementBySeconds(60)
	snapshotID, err := client.Snapshot()
	test.ErrFailWithDesc(err, t, "Creating snapshot")
	_, err = relay.CreateRelayTransaction(request2)
	test.ErrFailWithDesc(err, t, "Creating relay transaction 2")
	clk.IncrementBySeconds(60)
	signedTx3, err := relay.CreateRelayTransaction(request3)
	test.ErrFailWithDesc(err, t, "Creating relay transaction 3")
	err = client.Revert(snapshotID)
	test.ErrFailWithDesc(err, t, "Restoring snapshot")
	nonce, err := client.NonceAt(context.Background(), relay.Address(), nil)

	// Check tx1 went fine
	assertTransactionRelayed(t, signedTx1.Hash())

	// After 5 minutes, tx2 is not resent because tx1 is still unconfirmed
	clk.IncrementBySeconds(60 * 5)
	assertNoTransactionResent(t, relay.RelayServer)
	assertRelayNonce(t, nonce)

	// Mine a bunch of blocks, so tx1 is confirmed and tx2 is resent
	client.MineBlocks(12)
	newTx2, err := relay.UpdateUnconfirmedTransactions()
	test.ErrFailWithDesc(err, t, "Updating unconfirmed transactions")
	assertRelayNonce(t, nonce+1)
	assertTransactionRelayed(t, newTx2.Hash())

	// Reinject tx3 into the chain as if it were mined once tx2 goes through
	test.ErrFailWithDesc(client.SendTransaction(context.Background(), signedTx3), t, "Resending tx3")
	assertTransactionRelayed(t, signedTx3.Hash())

	// Check that tx3 does not get resent, even after time passes or blocks get mined, and that store is empty
	assertNoTransactionResent(t, relay.RelayServer)
	clk.IncrementBySeconds(300)
	client.MineBlocks(12)
	assertNoTransactionResent(t, relay.RelayServer)
	noTx, err := relay.TxStore.GetFirstTransaction()
	if noTx != nil || err != nil {
		t.Errorf("Expected tx store to be empty but found %v (error %v)", noTx, err)
	}
}
