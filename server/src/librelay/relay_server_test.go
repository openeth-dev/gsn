package librelay

import (
	"context"
	"crypto/ecdsa"
	"encoding/hex"
	"flag"
	"fmt"
	"gen/librelay"
	"gen/samplerec"
	"librelay/test"
	"librelay/txstore"
	"log"
	"math/big"
	"os"
	"strings"
	"testing"
	"time"

	"code.cloudfoundry.org/clock/fakeclock"

	"github.com/ethereum/go-ethereum"
	"github.com/ethereum/go-ethereum/accounts/abi"
	"github.com/ethereum/go-ethereum/accounts/abi/bind"
	"github.com/ethereum/go-ethereum/common"
	"github.com/ethereum/go-ethereum/common/hexutil"
	"github.com/ethereum/go-ethereum/core/types"
	"github.com/ethereum/go-ethereum/crypto"
	"github.com/ethereum/go-ethereum/ethclient"
	"github.com/ethereum/go-ethereum/params"
	"github.com/ethereum/go-ethereum/rpc"
)

type TestClient struct {
	*ethclient.Client

	RPC *rpc.Client
}

func NewTestClient(url string) (*TestClient, error) {
	rpcClient, err := rpc.DialContext(context.Background(), url)
	if err != nil {
		return nil, err
	}

	return &TestClient{
		ethclient.NewClient(rpcClient),
		rpcClient,
	}, nil
}

func (client *TestClient) AdjustTime(seconds uint64) error {
	return client.RPC.Call(nil, "evm_increaseTime", seconds)
}

func (client *TestClient) Commit() error {
	return client.RPC.Call(nil, "evm_mine")
}

func (client *TestClient) MineBlocks(n uint64) error {
	for ; n > 0; n-- {
		err := client.RPC.Call(nil, "evm_mine")
		if err != nil {
			return err
		}
	}
	return nil
}

func (client *TestClient) Snapshot() (uint64, error) {
	var result hexutil.Uint64
	err := client.RPC.Call(&result, "evm_snapshot")
	return uint64(result), err
}

func (client *TestClient) Revert(id uint64) error {
	return client.RPC.Call(nil, "evm_revert", id)
}

type TestServer struct {
	*RelayServer
}

func (relay *TestServer) Stake(ownerKey *ecdsa.PrivateKey) (err error) {
	tx, err := relay.sendStakeTransaction(ownerKey)
	if err != nil {
		return err
	}
	return relay.awaitTransactionMined(tx)
}

func (relay *TestServer) sendStakeTransaction(ownerKey *ecdsa.PrivateKey) (tx *types.Transaction, err error) {
	auth := bind.NewKeyedTransactor(ownerKey)
	auth.Value = relay.StakeAmount
	tx, err = relay.rhub.Stake(auth, relay.Address(), relay.UnstakeDelay)
	if err != nil {
		log.Println("rhub.stake() failed", relay.StakeAmount, relay.UnstakeDelay)
		return
	}
	log.Println("Stake() tx sent:", tx.Hash().Hex())
	return
}

func (relay *TestServer) Unstake(ownerKey *ecdsa.PrivateKey) (err error) {
	tx, err := relay.sendUnstakeTransaction(ownerKey)
	if err != nil {
		return err
	}
	return relay.awaitTransactionMined(tx)

}

func (relay *TestServer) sendUnstakeTransaction(ownerKey *ecdsa.PrivateKey) (tx *types.Transaction, err error) {
	auth := bind.NewKeyedTransactor(ownerKey)
	auth.Value = relay.StakeAmount
	tx, err = relay.rhub.Unstake(auth, relay.Address())
	if err != nil {
		log.Println("rhub.Unstake() failed", relay.StakeAmount, relay.UnstakeDelay)
		return
	}
	log.Println("Unstake() tx sent:", tx.Hash().Hex())
	return
}

var auth *bind.TransactOpts
var relay TestServer
var client *TestClient
var relayKey1 *ecdsa.PrivateKey
var gaslessKey2 *ecdsa.PrivateKey
var ownerKey3 *ecdsa.PrivateKey
var rhub *librelay.IRelayHub
var clk *fakeclock.FakeClock

var sampleRecipient common.Address
var rhaddr common.Address

var boundHub *bind.BoundContract
var boundRecipient *bind.BoundContract

var ethereumNodeURL = "http://localhost:8543"

func InitTestClient(url string) {
	relayKey1, _ = crypto.HexToECDSA("4f3edf983ac636a65a842ce7c78d9aa706d3b113bce9c46f30d7d21715b23b1d")
	gaslessKey2, _ = crypto.HexToECDSA("6cbed15c793ce57650b9877cf6fa156fbef513c4e6134f022a85b1ffdd59b2a1")
	ownerKey3, _ = crypto.HexToECDSA("6370fd033278c143179d81c5526140625662b8daa446c22ee2d73db3707e620c")

	fmt.Println("Test addresses:")
	fmt.Println("1. Relay  ", crypto.PubkeyToAddress(relayKey1.PublicKey).Hex())
	fmt.Println("2. Gasless", crypto.PubkeyToAddress(gaslessKey2.PublicKey).Hex())
	fmt.Println("3. Owner  ", crypto.PubkeyToAddress(ownerKey3.PublicKey).Hex())

	auth = bind.NewKeyedTransactor(relayKey1)
	var err error
	client, err = NewTestClient(url)
	if err != nil {
		log.Fatalf("Could not connect to local ganache: %v", err)
	}
	client.Commit()
}

func NewRelay(relayHubAddress common.Address) {
	fee := big.NewInt(10)
	stakeAmount := big.NewInt(1100000000000000000)
	gasLimit := uint64(1000000)
	defaultGasPrice := int64(params.GWei)
	gasPricePercent := big.NewInt(10)
	url := ""
	port := "8090"
	unstakeDelay := big.NewInt(3600 * 24 * 7)
	registrationBlockRate := uint64(5)
	clk = fakeclock.NewFakeClock(time.Now())
	txStore := txstore.NewMemoryTxStore(clk)
	var err error
	relay.RelayServer, err = NewRelayServer(
		common.Address{}, fee, url, port,
		relayHubAddress, stakeAmount, gasLimit, defaultGasPrice,
		gasPricePercent, relayKey1, unstakeDelay, registrationBlockRate,
		ethereumNodeURL, client, txStore, clk)
	if err != nil {
		log.Fatalln("Relay was not created", err)
	}
	return
}

func TestMain(m *testing.M) {
	InitTestClient(ethereumNodeURL)
	parsed, err := abi.JSON(strings.NewReader(librelay.IRelayHubABI))
	if err != nil {
		log.Fatalln(err)
	}

	// RelayHub's bytecode - the interface's artifact doesn't include it
	RelayHubBin := "0x60806040526040518060400160405280600581526020017f312e302e30000000000000000000000000000000000000000000000000000000815250600390805190602001906200005192919062000066565b503480156200005f57600080fd5b5062000115565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f10620000a957805160ff1916838001178555620000da565b82800160010185558215620000da579182015b82811115620000d9578251825591602001919060010190620000bc565b5b509050620000e99190620000ed565b5090565b6200011291905b808211156200010e576000816000905550600101620000f4565b5090565b90565b615ecf80620001256000396000f3fe6080604052600436106101095760003560e01c806370a0823111610095578063a8cd957211610064578063a8cd9572146103c9578063aa67c919146103f2578063adc9772e1461040e578063c3e712f21461042a578063f2888dbb1461045357610109565b806370a08231146102d157806385f4498b1461030e5780638d8514601461034b578063a863f8f91461038c57610109565b80632e1a7d4d116100dc5780632e1a7d4d146101ee5780633900243214610217578063405cec671461024057806354fd4d50146102695780636a7d84a41461029457610109565b80631166073a1461010e57806322741d33146101375780632b601747146101745780632d0335ab146101b1575b600080fd5b34801561011a57600080fd5b50610135600480360361013091908101906144b4565b61047c565b005b34801561014357600080fd5b5061015e6004803603610159919081019061440e565b610891565b60405161016b91906155fb565b60405180910390f35b34801561018057600080fd5b5061019b60048036036101969190810190614020565b610d36565b6040516101a89190615a48565b60405180910390f35b3480156101bd57600080fd5b506101d860048036036101d39190810190613ff7565b610ff7565b6040516101e59190615a48565b60405180910390f35b3480156101fa57600080fd5b5061021560048036036102109190810190614462565b61103f565b005b34801561022357600080fd5b5061023e600480360361023991908101906142b6565b6111ac565b005b34801561024c57600080fd5b5061026760048036036102629190810190614143565b61132f565b005b34801561027557600080fd5b5061027e61141c565b60405161028b9190615616565b60405180910390f35b3480156102a057600080fd5b506102bb60048036036102b69190810190614462565b6114ba565b6040516102c89190615a48565b60405180910390f35b3480156102dd57600080fd5b506102f860048036036102f39190810190613ff7565b6114d8565b6040516103059190615a48565b60405180910390f35b34801561031a57600080fd5b5061033560048036036103309190810190613ff7565b611521565b604051610342919061553b565b60405180910390f35b34801561035757600080fd5b50610372600480360361036d9190810190613ff7565b6115bd565b604051610383959493929190615a8c565b60405180910390f35b34801561039857600080fd5b506103b360048036036103ae9190810190614508565b611754565b6040516103c09190615a48565b60405180910390f35b3480156103d557600080fd5b506103f060048036036103eb9190810190614322565b611772565b005b61040c60048036036104079190810190613ff7565b6119a4565b005b61042860048036036104239190810190614251565b611ae9565b005b34801561043657600080fd5b50610451600480360361044c9190810190613ff7565b6121b1565b005b34801561045f57600080fd5b5061047a60048036036104759190810190613ff7565b61251b565b005b60003390503273ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16146104ef576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016104e6906159d8565b60405180910390fd5b600160038111156104fc57fe5b600160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060030160149054906101000a900460ff16600381111561055757fe5b14806105c857506002600381111561056b57fe5b600160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060030160149054906101000a900460ff1660038111156105c657fe5b145b610607576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016105fe90615818565b60405180910390fd5b67016345785d8a00008173ffffffffffffffffffffffffffffffffffffffff16311015610669576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610660906158b8565b60405180910390fd5b6002600381111561067657fe5b600160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060030160149054906101000a900460ff1660038111156106d157fe5b1461073b576002600160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060030160146101000a81548160ff0219169083600381111561073557fe5b02179055505b600160008273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060030160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f85b3ae3aae9d3fcb31142fbd8c3b4722d57825b8edd6e1366e69204afa5a0dfa85600160008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060000154600160008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060010154876040516108849493929190615adf565b60405180910390a3505050565b6000805a90503073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610905576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016108fc90615698565b60405180910390fd5b600060026000866040015173ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905060006060866040015173ffffffffffffffffffffffffffffffffffffffff1663fd9ae637905060e01b8760000151886020015189606001518a608001518b60a001518c60c001518d61016001516040516024016109b09796959493929190615422565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff8381831617835250505050905060006060886040015173ffffffffffffffffffffffffffffffffffffffff16620186a084604051610a4091906151ee565b60006040518083038160008787f1925050503d8060008114610a7e576040519150601f19603f3d011682016040523d82523d6000602084013e610a83565b606091505b509150915081610a9857610a9760026127ae565b5b80806020019051610aac919081019061428d565b93505050506000866040015173ffffffffffffffffffffffffffffffffffffffff168760c0015188606001518960200151604051602001610aee92919061522d565b604051602081830303815290604052604051610b0a91906151ee565b60006040518083038160008787f1925050503d8060008114610b48576040519150601f19603f3d011682016040523d82523d6000602084013e610b4d565b606091505b505090506000610b74610b655a878a010360016127dc565b8960a001518a60800151612801565b90506060886040015173ffffffffffffffffffffffffffffffffffffffff16639df2acc0905060e01b89600001518a602001518b606001518c608001518d60a001518e60c001518f6101600151898b8d604051602401610bdd9a99989796959493929190615498565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff838183161783525050505090506000896040015173ffffffffffffffffffffffffffffffffffffffff16620186a083604051610c6b91906151ee565b60006040518083038160008787f1925050503d8060008114610ca9576040519150601f19603f3d011682016040523d82523d6000602084013e610cae565b606091505b5050905080610cc257610cc160036127ae565b5b505083600260008a6040015173ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020541015610d1a57610d1960046127ae565b5b81610d26576001610d29565b60005b9550505050505092915050565b600060608a8a8a8a8a8a8a30604051602001610d599897969594939291906152c5565b60405160208183030381529060405290506000818d604051602001610d7f929190615205565b6040516020818303038152906040528051906020012090508b73ffffffffffffffffffffffffffffffffffffffff16610dc986610dbb8461281e565b61284e90919063ffffffff16565b73ffffffffffffffffffffffffffffffffffffffff1614610dfa5760016004811115610df157fe5b92505050610fe9565b856000808e73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205414610e555760026004811115610e4c57fe5b92505050610fe9565b6000610e62888a8c611754565b905060608c73ffffffffffffffffffffffffffffffffffffffff166383947ea0905060e01b8f8f8e8e8e8e8e8d8a604051602401610ea899989796959493929190615387565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff83818316178352505050509050600060608e73ffffffffffffffffffffffffffffffffffffffff1661c35084604051610f3391906151ee565b6000604051808303818686fa925050503d8060008114610f6f576040519150601f19603f3d011682016040523d82523d6000602084013e610f74565b606091505b509150915081610f985760036004811115610f8b57fe5b9650505050505050610fe9565b600081806020019051610fae919081019061448b565b90506000811480610fbf5750600a81115b15610fd35780975050505050505050610fe9565b600480811115610fdf57fe5b9750505050505050505b9a9950505050505050505050565b60008060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b600033905081600260008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205410156110c6576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016110bd90615958565b60405180910390fd5b81600260008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825403925050819055508073ffffffffffffffffffffffffffffffffffffffff166108fc839081150290604051600060405180830381858888f19350505050158015611159573d6000803e3d6000fd5b508073ffffffffffffffffffffffffffffffffffffffff167f7084f5476618d8e60b11ef0d7d3f06914655adb8793e28ff7f018d4c76d505d5836040516111a09190615a48565b60405180910390a25050565b6111b4613bd5565b6111bd8361293a565b90503073ffffffffffffffffffffffffffffffffffffffff16816060015173ffffffffffffffffffffffffffffffffffffffff1614156112e35760006112068260a001516129b7565b905063405cec6760e01b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916817bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916141580156112a25750631166073a60e01b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916817bffffffffffffffffffffffffffffffffffffffffffffffffffffffff191614155b6112e1576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016112d890615678565b60405180910390fd5b505b600061131e83856040516020016112fa91906151ee565b6040516020818303038152906040528051906020012061284e90919063ffffffff16565b9050611329816129ce565b50505050565b60005a905061133c613c21565b6040518061018001604052803373ffffffffffffffffffffffffffffffffffffffff1681526020018c73ffffffffffffffffffffffffffffffffffffffff1681526020018b73ffffffffffffffffffffffffffffffffffffffff1681526020018a81526020018981526020018881526020018781526020018681526020018581526020018481526020016113d18b6000612df6565b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19168152602001611400888a8c611754565b815250905061140f8183612e79565b5050505050505050505050565b60038054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156114b25780601f10611487576101008083540402835291602001916114b2565b820191906000526020600020905b81548152906001019060200180831161149557829003601f168201915b505050505081565b600081620186a08061c350620186a061c31001010101019050919050565b6000600260008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b600080600160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600201541180156115b6575042600160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206002015411155b9050919050565b6000806000806000600160008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600001549450600160008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600101549350600160008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600201549250600160008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060030160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169150600160008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060030160149054906101000a900460ff16905091939590929450565b6000611769611762856114ba565b8484612801565b90509392505050565b60006117ad848660405160200161178991906151ee565b6040516020818303038152906040528051906020012061284e90919063ffffffff16565b905060006117ea83856040516020016117c691906151ee565b6040516020818303038152906040528051906020012061284e90919063ffffffff16565b90508073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161461185a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161185190615858565b60405180910390fd5b611862613bd5565b61186b8761293a565b9050611875613bd5565b61187e8661293a565b905080600001518260000151146118ca576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016118c1906157f8565b60405180910390fd5b60608260a001518360400151846060015185608001516040516020016118f39493929190615255565b604051602081830303815290604052905060608260a0015183604001518460600151856080015160405160200161192d9493929190615255565b604051602081830303815290604052905080805190602001208280519060200120141561198f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161198690615898565b60405180910390fd5b611998866129ce565b50505050505050505050565b6000349050671bc16d674ec800008111156119f4576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016119eb90615758565b60405180910390fd5b611a3d600260008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054826134d0565b600260008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055503373ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff167f8752a472e571a816aea92eec8dae9baf628e840f4929fbcc2d155e6233ff68a783604051611add9190615a48565b60405180910390a35050565b60006003811115611af657fe5b600160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060030160149054906101000a900460ff166003811115611b5157fe5b1415611caf578173ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161415611bc6576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611bbd906156d8565b60405180910390fd5b33600160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060030160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060018060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060030160146101000a81548160ff02191690836003811115611ca557fe5b0217905550611e9e565b60016003811115611cbc57fe5b600160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060030160149054906101000a900460ff166003811115611d1757fe5b1480611d88575060026003811115611d2b57fe5b600160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060030160149054906101000a900460ff166003811115611d8657fe5b145b15611e62573373ffffffffffffffffffffffffffffffffffffffff16600160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060030160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614611e5d576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611e54906159b8565b60405180910390fd5b611e9d565b6040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611e9490615818565b60405180910390fd5b5b600034905080600160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060000160008282540192505081905550670de0b6b3a7640000600160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600001541015611f80576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611f7790615938565b60405180910390fd5b62093a80821015611fc6576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611fbd90615798565b60405180910390fd5b626ebe0082111561200c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161200390615878565b60405180910390fd5b600160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060010154821015612091576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161208890615838565b60405180910390fd5b81600160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600101819055508273ffffffffffffffffffffffffffffffffffffffff167f1449c6dd7851abc30abf37f57715f492010519147cc2652fbc38202c18a6ee90600160008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060000154600160008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600101546040516121a4929190615a63565b60405180910390a2505050565b3373ffffffffffffffffffffffffffffffffffffffff16600160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060030160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614612281576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612278906159b8565b60405180910390fd5b6001600381111561228e57fe5b600160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060030160149054906101000a900460ff1660038111156122e957fe5b148061235a5750600260038111156122fd57fe5b600160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060030160149054906101000a900460ff16600381111561235857fe5b145b612399576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161239090615978565b60405180910390fd5b42600160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206001015401600160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600201819055506003600160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060030160146101000a81548160ff0219169083600381111561248357fe5b02179055508073ffffffffffffffffffffffffffffffffffffffff167f5490afc1d818789c8b3d5d63bce3d2a3327d0bba4efb5a7751f783dc977d7d11600160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600201546040516125109190615a48565b60405180910390a250565b61252481611521565b612563576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161255a906159f8565b60405180910390fd5b3373ffffffffffffffffffffffffffffffffffffffff16600160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060030160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614612633576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161262a906159b8565b60405180910390fd5b60003390506000600160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600001549050600160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600080820160009055600182016000905560028201600090556003820160006101000a81549073ffffffffffffffffffffffffffffffffffffffff02191690556003820160146101000a81549060ff021916905550508173ffffffffffffffffffffffffffffffffffffffff166108fc829081150290604051600060405180830381858888f1935050505015801561275a573d6000803e3d6000fd5b508273ffffffffffffffffffffffffffffffffffffffff167f0f5bb82176feb1b5e747e28471aa92156a04d9f3ab9f45f28e2d704232b93f75826040516127a19190615a48565b60405180910390a2505050565b6060816040516020016127c191906155fb565b60405160208183030381529060405290508051602082018181fd5b6000816127ea5760006127f3565b611388620186a0015b8361c3100101905092915050565b6000606482606401848602028161281457fe5b0490509392505050565b600081604051602001612831919061529f565b604051602081830303815290604052805190602001209050919050565b600060418251146128625760009050612934565b60008060006020850151925060408501519150606085015160001a90507f7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a08260001c11156128b65760009350505050612934565b601b8160ff16141580156128ce5750601c8160ff1614155b156128df5760009350505050612934565b600186828585604051600081526020016040526040516129029493929190615556565b6020604051602081039080840390855afa158015612924573d6000803e3d6000fd5b5050506020604051035193505050505b92915050565b612942613bd5565b61294b82613525565b809050866000018760200188604001896060018a6080018b60a001869052868152508673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815250868152508681525086815250505050505050809050919050565b60006129c4826000613607565b60001b9050919050565b600160038111156129db57fe5b600160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060030160149054906101000a900460ff166003811115612a3657fe5b1480612aa7575060026003811115612a4a57fe5b600160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060030160149054906101000a900460ff166003811115612aa557fe5b145b80612b165750600380811115612ab957fe5b600160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060030160149054906101000a900460ff166003811115612b1457fe5b145b612b55576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612b4c906158f8565b60405180910390fd5b6000600160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000015490506000612ba9826002613621565b90506000612bb7838361367d565b905060026003811115612bc657fe5b600160008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060030160149054906101000a900460ff166003811115612c2157fe5b1415612c76578373ffffffffffffffffffffffffffffffffffffffff167f5490afc1d818789c8b3d5d63bce3d2a3327d0bba4efb5a7751f783dc977d7d1142604051612c6d9190615a48565b60405180910390a25b600160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600080820160009055600182016000905560028201600090556003820160006101000a81549073ffffffffffffffffffffffffffffffffffffffff02191690556003820160146101000a81549060ff02191690555050600073ffffffffffffffffffffffffffffffffffffffff166108fc839081150290604051600060405180830381858888f19350505050158015612d52573d6000803e3d6000fd5b5060003390508073ffffffffffffffffffffffffffffffffffffffff166108fc839081150290604051600060405180830381858888f19350505050158015612d9e573d6000803e3d6000fd5b508473ffffffffffffffffffffffffffffffffffffffff167fb0595266ccec357806b2691f348b128209f1060a0bda4f5c95f7090730351ff88284604051612de792919061535e565b60405180910390a25050505050565b60006004820183511015612e3f576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612e3690615998565b60405180910390fd5b6020820191508183015190507fffffffff000000000000000000000000000000000000000000000000000000008116905080905092915050565b60026003811115612e8657fe5b60016000846000015173ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060030160149054906101000a900460ff166003811115612ee557fe5b14612f25576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612f1c906158d8565b60405180910390fd5b3a8260a001511115612f6c576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612f6390615738565b60405180910390fd5b620186a0612f7e828460c0015161367d565b1015612fbf576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612fb690615638565b60405180910390fd5b60026000836040015173ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054818360a0015102111561304b576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401613042906157d8565b60405180910390fd5b6000613089836000015184602001518560400151866060015187608001518860a001518960c001518a60e001518b61010001518c6101200151610d36565b90506000600481111561309857fe5b811461313357826040015173ffffffffffffffffffffffffffffffffffffffff16836020015173ffffffffffffffffffffffffffffffffffffffff16846000015173ffffffffffffffffffffffffffffffffffffffff167fafb5afd6d1c2e8ffbfb480e674a169f493ece0b22658d4f4484e7334f0241e22866101400151856040516131259291906155d2565b60405180910390a4506134cc565b50600080836020015173ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000815480929190600101919050555060005a8203905060603073ffffffffffffffffffffffffffffffffffffffff166322741d3360e01b85846040516024016131c1929190615a18565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff838183161783525050505060405161322b91906151ee565b6000604051808303816000865af19150503d8060008114613268576040519150601f19603f3d011682016040523d82523d6000602084013e61326d565b606091505b5091505060008180602001905161328791908101906143e5565b905060006132aa61329b5a870360006127dc565b8760a001518860800151612801565b90508060026000886040015173ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020541015613332576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161332990615658565b60405180910390fd5b8060026000886040015173ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825403925050819055508060026000600160008a6000015173ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060030160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282540192505081905550856040015173ffffffffffffffffffffffffffffffffffffffff16866020015173ffffffffffffffffffffffffffffffffffffffff16876000015173ffffffffffffffffffffffffffffffffffffffff167fab74390d395916d9e0006298d47938a5def5d367054dcca78fa6ec84381f3f2289610140015186866040516134bf9392919061559b565b60405180910390a4505050505b5050565b60008082840190508381101561351b576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401613512906156b8565b60405180910390fd5b8091505092915050565b600080600080600060608061354161353c896136d3565b61372a565b90506135608160008151811061355357fe5b6020026020010151613837565b61357d8260018151811061357057fe5b6020026020010151613837565b61359a8360028151811061358d57fe5b6020026020010151613837565b6135b7846003815181106135aa57fe5b602002602001015161387a565b6135d4856004815181106135c757fe5b6020026020010151613837565b6135f1866005815181106135e457fe5b60200260200101516138d4565b9650965096509650965096505091939550919395565b6000613613838361394f565b60001c905080905092915050565b6000808211613665576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161365c906157b8565b60405180910390fd5b600082848161367057fe5b0490508091505092915050565b6000828211156136c2576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016136b990615778565b60405180910390fd5b600082840390508091505092915050565b6136db613ce3565b6000825114156137035760405180604001604052806000815260200160008152509050613725565b6000602083019050604051806040016040528084518152602001828152509150505b919050565b6060613735826139ad565b613774576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161376b90615918565b60405180910390fd5b600061377f836139e6565b9050806040519080825280602002602001820160405280156137bb57816020015b6137a8613cfd565b8152602001906001900390816137a05790505b50915060006137cd8460200151613a41565b8460200151019050600080600090505b8381101561382e576137ee83613aca565b915060405180604001604052808381526020018481525085828151811061381157fe5b6020026020010181905250818301925080806001019150506137dd565b50505050919050565b6000806138478360200151613a41565b9050600081846000015103905060008285602001510190506000826020036101000a825104905080945050505050919050565b60006015826000015111156138c4576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016138bb906156f8565b60405180910390fd5b6138cd82613837565b9050919050565b606060006138e58360200151613a41565b905060008184600001510390506060816040519080825280601f01601f1916602001820160405280156139275781602001600182028038833980820191505090505b5090506000816020019050613943848760200151018285613b7d565b81945050505050919050565b60006020820183511015613998576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161398f90615718565b60405180910390fd5b60208201915081830151905080905092915050565b600080600083602001519050805160001a915060c060ff168260ff1610156139da576000925050506139e1565b6001925050505b919050565b6000806000905060006139fc8460200151613a41565b84602001510190506000846000015185602001510190505b80821015613a3657613a2582613aca565b820191508280600101935050613a14565b829350505050919050565b600080825160001a9050608060ff16811015613a61576000915050613ac5565b60b860ff16811080613a86575060c060ff168110158015613a85575060f860ff1681105b5b15613a95576001915050613ac5565b60c060ff16811015613ab55760018060b80360ff16820301915050613ac5565b60018060f80360ff168203019150505b919050565b600080825160001a9050608060ff16811015613aea576001915050613b78565b60b860ff16811015613b08576001608060ff16820301915050613b78565b60c060ff16811015613b385760b78103600184019350806020036101000a84510460018201810193505050613b76565b60f860ff16811015613b5657600160c060ff16820301915050613b78565b60f78103600184019350806020036101000a845104600182018101935050505b505b919050565b5b602060ff168110613bad5782518252602060ff1683019250602060ff1682019150602060ff1681039050613b7e565b6000600182602060ff16036101000a0390508019845116818451168181178552505050505050565b6040518060c00160405280600081526020016000815260200160008152602001600073ffffffffffffffffffffffffffffffffffffffff16815260200160008152602001606081525090565b604051806101800160405280600073ffffffffffffffffffffffffffffffffffffffff168152602001600073ffffffffffffffffffffffffffffffffffffffff168152602001600073ffffffffffffffffffffffffffffffffffffffff1681526020016060815260200160008152602001600081526020016000815260200160008152602001606081526020016060815260200160007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19168152602001600081525090565b604051806040016040528060008152602001600081525090565b604051806040016040528060008152602001600081525090565b600081359050613d2681615e20565b92915050565b600081519050613d3b81615e37565b92915050565b600081359050613d5081615e4e565b92915050565b600082601f830112613d6757600080fd5b8135613d7a613d7582615b58565b615b2b565b91508082526020830160208301858383011115613d9657600080fd5b613da1838284615d6e565b50505092915050565b600082601f830112613dbb57600080fd5b8135613dce613dc982615b84565b615b2b565b91508082526020830160208301858383011115613dea57600080fd5b613df5838284615d6e565b50505092915050565b600081519050613e0d81615e65565b92915050565b600082601f830112613e2457600080fd5b8135613e37613e3282615bb0565b615b2b565b91508082526020830160208301858383011115613e5357600080fd5b613e5e838284615d6e565b50505092915050565b60006101808284031215613e7a57600080fd5b613e85610180615b2b565b90506000613e9584828501613d17565b6000830152506020613ea984828501613d17565b6020830152506040613ebd84828501613d17565b604083015250606082013567ffffffffffffffff811115613edd57600080fd5b613ee984828501613d56565b6060830152506080613efd84828501613fcd565b60808301525060a0613f1184828501613fcd565b60a08301525060c0613f2584828501613fcd565b60c08301525060e0613f3984828501613fcd565b60e08301525061010082013567ffffffffffffffff811115613f5a57600080fd5b613f6684828501613d56565b6101008301525061012082013567ffffffffffffffff811115613f8857600080fd5b613f9484828501613d56565b61012083015250610140613faa84828501613d41565b61014083015250610160613fc084828501613fcd565b6101608301525092915050565b600081359050613fdc81615e75565b92915050565b600081519050613ff181615e75565b92915050565b60006020828403121561400957600080fd5b600061401784828501613d17565b91505092915050565b6000806000806000806000806000806101408b8d03121561404057600080fd5b600061404e8d828e01613d17565b9a5050602061405f8d828e01613d17565b99505060406140708d828e01613d17565b98505060608b013567ffffffffffffffff81111561408d57600080fd5b6140998d828e01613daa565b97505060806140aa8d828e01613fcd565b96505060a06140bb8d828e01613fcd565b95505060c06140cc8d828e01613fcd565b94505060e06140dd8d828e01613fcd565b9350506101008b013567ffffffffffffffff8111156140fb57600080fd5b6141078d828e01613daa565b9250506101208b013567ffffffffffffffff81111561412557600080fd5b6141318d828e01613daa565b9150509295989b9194979a5092959850565b60008060008060008060008060006101208a8c03121561416257600080fd5b60006141708c828d01613d17565b99505060206141818c828d01613d17565b98505060408a013567ffffffffffffffff81111561419e57600080fd5b6141aa8c828d01613daa565b97505060606141bb8c828d01613fcd565b96505060806141cc8c828d01613fcd565b95505060a06141dd8c828d01613fcd565b94505060c06141ee8c828d01613fcd565b93505060e08a013567ffffffffffffffff81111561420b57600080fd5b6142178c828d01613daa565b9250506101008a013567ffffffffffffffff81111561423557600080fd5b6142418c828d01613daa565b9150509295985092959850929598565b6000806040838503121561426457600080fd5b600061427285828601613d17565b925050602061428385828601613fcd565b9150509250929050565b60006020828403121561429f57600080fd5b60006142ad84828501613d2c565b91505092915050565b600080604083850312156142c957600080fd5b600083013567ffffffffffffffff8111156142e357600080fd5b6142ef85828601613daa565b925050602083013567ffffffffffffffff81111561430c57600080fd5b61431885828601613daa565b9150509250929050565b6000806000806080858703121561433857600080fd5b600085013567ffffffffffffffff81111561435257600080fd5b61435e87828801613daa565b945050602085013567ffffffffffffffff81111561437b57600080fd5b61438787828801613daa565b935050604085013567ffffffffffffffff8111156143a457600080fd5b6143b087828801613daa565b925050606085013567ffffffffffffffff8111156143cd57600080fd5b6143d987828801613daa565b91505092959194509250565b6000602082840312156143f757600080fd5b600061440584828501613dfe565b91505092915050565b6000806040838503121561442157600080fd5b600083013567ffffffffffffffff81111561443b57600080fd5b61444785828601613e67565b925050602061445885828601613fcd565b9150509250929050565b60006020828403121561447457600080fd5b600061448284828501613fcd565b91505092915050565b60006020828403121561449d57600080fd5b60006144ab84828501613fe2565b91505092915050565b600080604083850312156144c757600080fd5b60006144d585828601613fcd565b925050602083013567ffffffffffffffff8111156144f257600080fd5b6144fe85828601613e13565b9150509250929050565b60008060006060848603121561451d57600080fd5b600061452b86828701613fcd565b935050602061453c86828701613fcd565b925050604061454d86828701613fcd565b9150509250925092565b61456081615d14565b82525050565b61456f81615c63565b82525050565b61457e81615c51565b82525050565b61458d81615c51565b82525050565b6145a461459f82615c51565b615db0565b82525050565b6145b381615c75565b82525050565b6145c281615c81565b82525050565b6145d96145d482615c81565b615dc2565b82525050565b6145e881615c8b565b82525050565b6145f781615c8b565b82525050565b600061460882615be7565b6146128185615c19565b9350614622818560208601615d7d565b61462b81615de8565b840191505092915050565b600061464182615be7565b61464b8185615c2a565b935061465b818560208601615d7d565b80840191505092915050565b600061467282615bdc565b61467c8185615c08565b935061468c818560208601615d7d565b61469581615de8565b840191505092915050565b60006146ab82615bdc565b6146b58185615c19565b93506146c5818560208601615d7d565b6146ce81615de8565b840191505092915050565b60006146e482615bdc565b6146ee8185615c2a565b93506146fe818560208601615d7d565b80840191505092915050565b61471381615d26565b82525050565b61472281615d38565b82525050565b600061473382615bfd565b61473d8185615c35565b935061474d818560208601615d7d565b61475681615de8565b840191505092915050565b600061476c82615bf2565b6147768185615c35565b9350614786818560208601615d7d565b61478f81615de8565b840191505092915050565b60006147a7601483615c35565b91507f4e6f7420656e6f756768206761736c65667428290000000000000000000000006000830152602082019050919050565b60006147e7601c83615c46565b91507f19457468657265756d205369676e6564204d6573736167653a0a3332000000006000830152601c82019050919050565b6000614827601383615c35565b91507f53686f756c64206e6f74206765742068657265000000000000000000000000006000830152602082019050919050565b6000614867601783615c35565b91507f4c6567616c2072656c6179207472616e73616374696f6e0000000000000000006000830152602082019050919050565b60006148a7602783615c35565b91507f4f6e6c792052656c61794875622073686f756c642063616c6c2074686973206660008301527f756e6374696f6e000000000000000000000000000000000000000000000000006020830152604082019050919050565b600061490d601b83615c35565b91507f536166654d6174683a206164646974696f6e206f766572666c6f7700000000006000830152602082019050919050565b600061494d601d83615c35565b91507f72656c61792063616e6e6f74207374616b6520666f7220697473656c660000006000830152602082019050919050565b600061498d603a83615c35565b91507f496e76616c696420524c504974656d2e2041646472657373657320617265206560008301527f6e636f64656420696e203230206279746573206f72206c6573730000000000006020830152604082019050919050565b60006149f3602683615c35565b91507f475245415445525f4f525f455155414c5f544f5f33325f4c454e4754485f524560008301527f51554952454400000000000000000000000000000000000000000000000000006020830152604082019050919050565b6000614a59601183615c35565b91507f496e76616c6964206761732070726963650000000000000000000000000000006000830152602082019050919050565b6000614a99600f83615c35565b91507f6465706f73697420746f6f2062696700000000000000000000000000000000006000830152602082019050919050565b6000614ad9601e83615c35565b91507f536166654d6174683a207375627472616374696f6e206f766572666c6f7700006000830152602082019050919050565b6000614b19601883615c35565b91507f64656c6179206c6f776572207468616e206d696e696d756d00000000000000006000830152602082019050919050565b6000614b59601a83615c35565b91507f536166654d6174683a206469766973696f6e206279207a65726f0000000000006000830152602082019050919050565b6000614b99601983615c35565b91507f526563697069656e742062616c616e636520746f6f206c6f77000000000000006000830152602082019050919050565b6000614bd9600f83615c35565b91507f446966666572656e74206e6f6e636500000000000000000000000000000000006000830152602082019050919050565b6000614c19601583615c35565b91507f77726f6e6720737461746520666f72207374616b6500000000000000000000006000830152602082019050919050565b6000614c59602083615c35565b91507f756e7374616b6544656c61792063616e6e6f74206265206465637265617365646000830152602082019050919050565b6000614c99601083615c35565b91507f446966666572656e74207369676e6572000000000000000000000000000000006000830152602082019050919050565b6000614cd9601983615c35565b91507f64656c617920686967686572207468616e206d6178696d756d000000000000006000830152602082019050919050565b6000614d19600b83615c35565b91507f747820697320657175616c0000000000000000000000000000000000000000006000830152602082019050919050565b6000614d59601a83615c35565b91507f62616c616e6365206c6f776572207468616e206d696e696d756d0000000000006000830152602082019050919050565b6000614d99600d83615c35565b91507f556e6b6e6f776e2072656c6179000000000000000000000000000000000000006000830152602082019050919050565b6000614dd9600483615c46565b91507f726c783a000000000000000000000000000000000000000000000000000000006000830152600482019050919050565b6000614e19600e83615c35565b91507f556e7374616b65642072656c61790000000000000000000000000000000000006000830152602082019050919050565b6000614e59600d83615c35565b91507f69734c697374206661696c6564000000000000000000000000000000000000006000830152602082019050919050565b6000614e99601883615c35565b91507f7374616b65206c6f776572207468616e206d696e696d756d00000000000000006000830152602082019050919050565b6000614ed9601283615c35565b91507f696e73756666696369656e742066756e647300000000000000000000000000006000830152602082019050919050565b6000614f19600f83615c35565b91507f616c72656164792072656d6f76656400000000000000000000000000000000006000830152602082019050919050565b6000614f59602583615c35565b91507f475245415445525f4f525f455155414c5f544f5f345f4c454e4754485f52455160008301527f55495245440000000000000000000000000000000000000000000000000000006020830152604082019050919050565b6000614fbf600983615c35565b91507f6e6f74206f776e657200000000000000000000000000000000000000000000006000830152602082019050919050565b6000614fff602383615c35565b91507f436f6e7472616374732063616e6e6f742072656769737465722061732072656c60008301527f61797300000000000000000000000000000000000000000000000000000000006020830152604082019050919050565b6000615065601183615c35565b91507f63616e556e7374616b65206661696c65640000000000000000000000000000006000830152602082019050919050565b6000610180830160008301516150b16000860182614575565b5060208301516150c46020860182614575565b5060408301516150d76040860182614575565b50606083015184820360608601526150ef8282614667565b915050608083015161510460808601826151aa565b5060a083015161511760a08601826151aa565b5060c083015161512a60c08601826151aa565b5060e083015161513d60e08601826151aa565b506101008301518482036101008601526151578282614667565b9150506101208301518482036101208601526151738282614667565b91505061014083015161518a6101408601826145df565b5061016083015161519f6101608601826151aa565b508091505092915050565b6151b381615cfd565b82525050565b6151c281615cfd565b82525050565b6151d96151d482615cfd565b615dde565b82525050565b6151e881615d07565b82525050565b60006151fa8284614636565b915081905092915050565b60006152118285614636565b915061521d8284614593565b6014820191508190509392505050565b600061523982856146d9565b91506152458284614593565b6014820191508190509392505050565b600061526182876146d9565b915061526d82866151c8565b60208201915061527d8285614593565b60148201915061528d82846151c8565b60208201915081905095945050505050565b60006152aa826147da565b91506152b682846145c8565b60208201915081905092915050565b60006152d082614dcc565b91506152dc828b614593565b6014820191506152ec828a614593565b6014820191506152fc8289614636565b915061530882886151c8565b60208201915061531882876151c8565b60208201915061532882866151c8565b60208201915061533882856151c8565b6020820191506153488284614593565b6014820191508190509998505050505050505050565b60006040820190506153736000830185614557565b61538060208301846151b9565b9392505050565b60006101208201905061539d600083018c614584565b6153aa602083018b614584565b81810360408301526153bc818a6145fd565b90506153cb60608301896151b9565b6153d860808301886151b9565b6153e560a08301876151b9565b6153f260c08301866151b9565b81810360e083015261540481856145fd565b90506154146101008301846151b9565b9a9950505050505050505050565b600060e082019050615437600083018a614584565b6154446020830189614584565b818103604083015261545681886146a0565b905061546560608301876151b9565b61547260808301866151b9565b61547f60a08301856151b9565b61548c60c08301846151b9565b98975050505050505050565b6000610140820190506154ae600083018d614584565b6154bb602083018c614584565b81810360408301526154cd818b6146a0565b90506154dc606083018a6151b9565b6154e960808301896151b9565b6154f660a08301886151b9565b61550360c08301876151b9565b61551060e08301866151b9565b61551e6101008301856145aa565b61552c6101208301846145b9565b9b9a5050505050505050505050565b600060208201905061555060008301846145aa565b92915050565b600060808201905061556b60008301876145b9565b61557860208301866151df565b61558560408301856145b9565b61559260608301846145b9565b95945050505050565b60006060820190506155b060008301866145ee565b6155bd602083018561470a565b6155ca60408301846151b9565b949350505050565b60006040820190506155e760008301856145ee565b6155f460208301846151b9565b9392505050565b6000602082019050615610600083018461470a565b92915050565b600060208201905081810360008301526156308184614761565b905092915050565b600060208201905081810360008301526156518161479a565b9050919050565b600060208201905081810360008301526156718161481a565b9050919050565b600060208201905081810360008301526156918161485a565b9050919050565b600060208201905081810360008301526156b18161489a565b9050919050565b600060208201905081810360008301526156d181614900565b9050919050565b600060208201905081810360008301526156f181614940565b9050919050565b6000602082019050818103600083015261571181614980565b9050919050565b60006020820190508181036000830152615731816149e6565b9050919050565b6000602082019050818103600083015261575181614a4c565b9050919050565b6000602082019050818103600083015261577181614a8c565b9050919050565b6000602082019050818103600083015261579181614acc565b9050919050565b600060208201905081810360008301526157b181614b0c565b9050919050565b600060208201905081810360008301526157d181614b4c565b9050919050565b600060208201905081810360008301526157f181614b8c565b9050919050565b6000602082019050818103600083015261581181614bcc565b9050919050565b6000602082019050818103600083015261583181614c0c565b9050919050565b6000602082019050818103600083015261585181614c4c565b9050919050565b6000602082019050818103600083015261587181614c8c565b9050919050565b6000602082019050818103600083015261589181614ccc565b9050919050565b600060208201905081810360008301526158b181614d0c565b9050919050565b600060208201905081810360008301526158d181614d4c565b9050919050565b600060208201905081810360008301526158f181614d8c565b9050919050565b6000602082019050818103600083015261591181614e0c565b9050919050565b6000602082019050818103600083015261593181614e4c565b9050919050565b6000602082019050818103600083015261595181614e8c565b9050919050565b6000602082019050818103600083015261597181614ecc565b9050919050565b6000602082019050818103600083015261599181614f0c565b9050919050565b600060208201905081810360008301526159b181614f4c565b9050919050565b600060208201905081810360008301526159d181614fb2565b9050919050565b600060208201905081810360008301526159f181614ff2565b9050919050565b60006020820190508181036000830152615a1181615058565b9050919050565b60006040820190508181036000830152615a328185615098565b9050615a4160208301846151b9565b9392505050565b6000602082019050615a5d60008301846151b9565b92915050565b6000604082019050615a7860008301856151b9565b615a8560208301846151b9565b9392505050565b600060a082019050615aa160008301886151b9565b615aae60208301876151b9565b615abb60408301866151b9565b615ac86060830185614566565b615ad56080830184614719565b9695505050505050565b6000608082019050615af460008301876151b9565b615b0160208301866151b9565b615b0e60408301856151b9565b8181036060830152615b208184614728565b905095945050505050565b6000604051905081810181811067ffffffffffffffff82111715615b4e57600080fd5b8060405250919050565b600067ffffffffffffffff821115615b6f57600080fd5b601f19601f8301169050602081019050919050565b600067ffffffffffffffff821115615b9b57600080fd5b601f19601f8301169050602081019050919050565b600067ffffffffffffffff821115615bc757600080fd5b601f19601f8301169050602081019050919050565b600081519050919050565b600081519050919050565b600081519050919050565b600081519050919050565b600082825260208201905092915050565b600082825260208201905092915050565b600081905092915050565b600082825260208201905092915050565b600081905092915050565b6000615c5c82615cdd565b9050919050565b6000615c6e82615cdd565b9050919050565b60008115159050919050565b6000819050919050565b60007fffffffff0000000000000000000000000000000000000000000000000000000082169050919050565b6000819050615cc582615e06565b919050565b6000819050615cd882615e13565b919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b600060ff82169050919050565b6000615d1f82615d4a565b9050919050565b6000615d3182615cb7565b9050919050565b6000615d4382615cca565b9050919050565b6000615d5582615d5c565b9050919050565b6000615d6782615cdd565b9050919050565b82818337600083830152505050565b60005b83811015615d9b578082015181840152602081019050615d80565b83811115615daa576000848401525b50505050565b6000615dbb82615dcc565b9050919050565b6000819050919050565b6000615dd782615df9565b9050919050565b6000819050919050565b6000601f19601f8301169050919050565b60008160601b9050919050565b60058110615e1057fe5b50565b60048110615e1d57fe5b50565b615e2981615c51565b8114615e3457600080fd5b50565b615e4081615c81565b8114615e4b57600080fd5b50565b615e5781615c8b565b8114615e6257600080fd5b50565b60058110615e7257600080fd5b50565b615e7e81615cfd565b8114615e8957600080fd5b5056fea365627a7a72305820140e1a345ff09aea1fd0f8d57c8980da2a20ebc054905960a535065b418bd3f36c6578706572696d656e74616cf564736f6c634300050a0040"

	if _, err = hex.DecodeString(RelayHubBin[2:]); err != nil {
		log.Println("RelayHubBin", RelayHubBin)
		log.Fatalln("Invalid hex: RelayHubBin", err)
	}
	rhaddr, _, boundHub, err = bind.DeployContract(auth, parsed, common.FromHex(RelayHubBin), client)
	if err != nil {
		log.Fatalf("could not deploy contract: %v", err)
	}
	parsed, err = abi.JSON(strings.NewReader(samplerec.SampleRecipientABI))
	if err != nil {
		log.Fatalln(err)
	}
	auth.GasLimit = 3000000
	sampleRecipient, _, boundRecipient, err = bind.DeployContract(auth, parsed, common.FromHex(samplerec.SampleRecipientBin), client, rhaddr)
	if err != nil {
		log.Fatalln("Error deploying SampleRecipient contract:", err)
	}
	rhub, err = librelay.NewIRelayHub(rhaddr, client)
	if err != nil {
		log.Fatalln(err)
	}
	fmt.Printf("RelayHub:  %s\nRecipient: %s\n", rhaddr.String(), sampleRecipient.String())
	NewRelay(rhaddr)

	tx, err := relay.sendStakeTransaction(ownerKey3)
	if err != nil {
		log.Fatalf("Could not 'sendStakeTransaction': %v", err)
	}
	client.Commit()
	err = relay.awaitTransactionMined(tx)
	if err != nil {
		log.Fatalln(err)
	}

	auth := bind.NewKeyedTransactor(ownerKey3)
	auth.Value = big.NewInt(1)
	auth.Value.Lsh(auth.Value, 40)

	tx, err = rhub.DepositFor(auth, sampleRecipient)
	client.Commit()
	if err != nil {
		log.Fatalln(err)
	}
	_, _ = client.TransactionReceipt(context.Background(), tx.Hash())

	callOpt := &bind.CallOpts{}
	toBalance, err := rhub.BalanceOf(callOpt, sampleRecipient)
	if err != nil {
		log.Println(err)
		return
	}
	log.Println("To.balance: ", toBalance)

	fmt.Println("-----------------------------------------------------")
	flag.Parse()
	exitStatus := m.Run()
	defer os.Exit(exitStatus)
}

func TestRefreshGasPrice(t *testing.T) {
	gasPriceBefore := relay.GasPrice()
	test.ErrFail(relay.RefreshGasPrice(), t)
	gasPriceAfter := relay.GasPrice()
	if gasPriceBefore.Cmp(big.NewInt(0)) != 0 {
		t.Error()
	}
	// Gas price is ganache default plus 10% specified in relay constructor
	if gasPriceAfter.Cmp(big.NewInt(1100)) != 0 {
		t.Error("Gas price after is", gasPriceAfter.Uint64())
	}
}

func TestRegisterRelay(t *testing.T) {
	staked, err := relay.IsStaked()
	if !staked {
		t.Error("Relay is not staked")
	}
	test.ErrFail(err, t)
	// TODO: Watch out for FLICKERING: attempt to AdjustTime ahead of machine clock will have no effect at all
	err = client.AdjustTime(50)
	client.Commit()
	tx, err := relay.sendRegisterTransaction()
	test.ErrFail(err, t)
	if err != nil {
		fmt.Println("ERROR", err)
	}
	client.Commit()
	test.ErrFail(relay.awaitTransactionMined(tx), t)
	when, err := relay.RegistrationDate()
	if err != nil {
		fmt.Println("ERROR", err)
	}
	if time.Now().Unix()-when > int64((1 * time.Minute).Seconds()) {
		t.Error("Wrong registration time/date", time.Now().Unix(), when)
	}
}

func printSignature(txb string, txFee int64, gasPrice int64, gasLimit int64, relayMaxNonce int64, recipientNonce int64) {
	fmt.Println("ganache-cli -d")
	fmt.Println("npx truffle console --network development")
	fmt.Println("const utils = require('../src/js/relayclient/utils')")
	fmt.Printf(
		"let hash = utils.getTransactionHash('%v', '%v', '%v', '%v', '%v', '%v', '%v', '%v', '%v')\n",
		crypto.PubkeyToAddress(gaslessKey2.PublicKey).Hex(), sampleRecipient.Hex(), txb, txFee, gasPrice, gasLimit, recipientNonce, rhaddr.Hex(), relay.Address().Hex(),
	)
	fmt.Printf("utils.getTransactionSignature(web3, '0xffcf8fdee72ac11b5c542428b35eef5769c409f0', hash)\n")
}

func newRelayTransactionRequest(t *testing.T, recipientNonce int64, signature string) (request RelayTransactionRequest) {
	test.ErrFail(relay.RefreshGasPrice(), t)
	addressGasless := crypto.PubkeyToAddress(gaslessKey2.PublicKey)
	txb := "0x2ac0df260000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000000b68656c6c6f20776f726c64000000000000000000000000000000000000000000"
	txFee := int64(10)
	gasPrice := int64(2000)
	gasLimit := int64(1000000)
	relayMaxNonce := int64(1000000)
	if signature[:2] == "0x" {
		signature = signature[2:]
	}

	// Uncomment the following line to print the commands to generate the signature that needs to be injected
	// printSignature(txb, txFee, gasPrice, gasLimit, relayMaxNonce, recipientNonce)

	return RelayTransactionRequest{
		EncodedFunction: txb,
		ApprovalData:		 common.Hex2Bytes(""),
		Signature:       common.Hex2Bytes(signature),
		From:            addressGasless,
		To:              sampleRecipient,
		GasPrice:        *big.NewInt(gasPrice),
		GasLimit:        *big.NewInt(gasLimit),
		RecipientNonce:  *big.NewInt(recipientNonce),
		RelayMaxNonce:   *big.NewInt(relayMaxNonce),
		RelayFee:        *big.NewInt(txFee),
		RelayHubAddress: rhaddr,
	}
}

func assertTransactionRelayed(t *testing.T, txHash common.Hash) (receipt *types.Receipt) {
	receipt, err := client.TransactionReceipt(context.Background(), txHash)
	test.ErrFailWithDesc(err, t, fmt.Sprint("Fetching transaction receipt for hash ", txHash.Hex()))
	logsLen := len(receipt.Logs)
	expectedLogs := 4
	if logsLen != expectedLogs {
		t.Errorf("Incorrect logs len: expected %d, actual: %d", expectedLogs, logsLen)
	}
	transactionRelayedEvent := new(librelay.IRelayHubTransactionRelayed)
	sampleRecipientEmitted := new(samplerec.SampleRecipientSampleRecipientEmitted)
	preRelayedEmitted := new(samplerec.SampleRecipientSampleRecipientPreCall)
	postRelayedEmitted := new(samplerec.SampleRecipientSampleRecipientPostCall)
	test.ErrFailWithDesc(boundRecipient.UnpackLog(preRelayedEmitted, "SampleRecipientPreCall", *receipt.Logs[0]), t, "Unpacking SampleRecipientPreCall")
	test.ErrFailWithDesc(boundRecipient.UnpackLog(sampleRecipientEmitted, "SampleRecipientEmitted", *receipt.Logs[1]), t, "Unpacking sample recipient emitted")
	test.ErrFailWithDesc(boundRecipient.UnpackLog(postRelayedEmitted, "SampleRecipientPostCall", *receipt.Logs[2]), t, "Unpacking SampleRecipientPostCall")
	test.ErrFailWithDesc(boundHub.UnpackLog(transactionRelayedEvent, "TransactionRelayed", *receipt.Logs[3]), t, "Unpacking transaction relayed")

	expectedMessage := "hello world"
	if sampleRecipientEmitted.Message != expectedMessage {
		t.Errorf("Message was not what expected! expected: %s actual: %s", expectedMessage, sampleRecipientEmitted.Message)
	}
	return receipt
}

func assertRelayNonce(t *testing.T, expected uint64) {
	nonce, err := client.NonceAt(context.Background(), relay.Address(), nil)
	if nonce != expected || err != nil {
		t.Errorf("Relay nonce is %v but expected %v (error %v)", nonce, expected, err)
	}
}

func assertNoTransactionResent(t *testing.T, relay *RelayServer) {
	noTx, err := relay.UpdateUnconfirmedTransactions()
	test.ErrFailWithDesc(err, t, "Updating unconfirmed transactions")
	if noTx != nil {
		t.Errorf("Expected no tx to be resent upon updating unconfirmed txs, but %v with nonce %v was resent", noTx.Hash().Hex(), noTx.Nonce())
	}
}

func TestCreateRelayTransaction(t *testing.T) {
	request := newRelayTransactionRequest(t, 0, "0x8d48d0f3416480011e4556d3dfbb4ef534632a2936b4169fc134fa17403693df354e888558439101e4fdec242acad39b2bd6d6a927842b9f311eba822a5b3d501b")
	signedTx, err := relay.CreateRelayTransaction(request)
	test.ErrFailWithDesc(err, t, "Creating relay transaction")
	client.Commit()
	assertTransactionRelayed(t, signedTx.Hash())
}

func TestResendRelayTransaction(t *testing.T) {
	test.ErrFail(relay.TxStore.Clear(), t)
	request := newRelayTransactionRequest(t, 1, "0x5f94ad28a24e38262824f47c6d329796886d7b282c6482e62a646b18aa9eb5ba6ec14cd6cd24463e2799c225c44b58bd84b66e314902d0c409b58c3e3e77d06b1c")

	// Send a transaction via the relay, but then revert to a previous snapshot
	snapshotID, err := client.Snapshot()
	test.ErrFailWithDesc(err, t, "Creating snapshot")
	signedTx, err := relay.CreateRelayTransaction(request)
	test.ErrFailWithDesc(err, t, "Creating relay transaction")
	err = client.Revert(snapshotID)
	test.ErrFailWithDesc(err, t, "Restoring snapshot")

	// Ensure tx is removed by the revert
	_, err = client.TransactionReceipt(context.Background(), signedTx.Hash())
	if err != ethereum.NotFound {
		t.Errorf("Transaction %v should not have been found (error %v)", signedTx.Hash().Hex(), err)
	}

	// Should not do anything, as not enough time has passed
	clk.IncrementBySeconds(1 * 60)
	assertNoTransactionResent(t, relay.RelayServer)
	sameTx, err := relay.TxStore.GetFirstTransaction()
	if sameTx.Hash() != signedTx.Hash() {
		t.Errorf("Transaction should not have been resent if less than 5 minutes passed: original tx %v but loaded from store was %v", signedTx.Hash().Hex(), sameTx.Hash().Hex())
	}
	_, err = client.TransactionReceipt(context.Background(), sameTx.Hash())
	if err != ethereum.NotFound {
		t.Errorf("Transaction %v should not have been found (error %v)", sameTx.Hash().Hex(), err)
	}

	// Advance time
	clk.IncrementBySeconds(6 * 60)
	newTx, err := relay.UpdateUnconfirmedTransactions()
	test.ErrFailWithDesc(err, t, "Updating unconfirmed transactions")

	// Check transaction was now sent with increased gas price
	client.MineBlocks(2)
	assertTransactionRelayed(t, newTx.Hash())
	if newTx.GasPrice().Int64() != 2400 {
		t.Errorf("Gas price of resent transaction is incorrect: expected %v but was %v", 2400, newTx.GasPrice().Int64())
	}

	// Check the tx is removed from the store after enough blocks
	client.MineBlocks(12)
	assertNoTransactionResent(t, relay.RelayServer)
	missingTx, err := relay.TxStore.GetFirstTransaction()
	if missingTx != nil || err != nil {
		t.Errorf("Transaction %v was not removed from store after 12 confirmations (error %v)", missingTx.Hash().Hex(), err)
	}
}

func TestMultipleRelayTransactions(t *testing.T) {
	test.ErrFail(relay.TxStore.Clear(), t)
	request1 := newRelayTransactionRequest(t, 2, "0xa1a5580b9974a0a2a54e33e5c82f2cb913656e6b65a5381e20ef3b94e6f0d4280d62b78be4504ad32fce1575fc6f4eb8cfd6fcd4a9e8d919cf9867222ab108bf1b")
	request2 := newRelayTransactionRequest(t, 3, "0xd6b2df0a5fe28710646e5dff18e8166264b829b199c7e07c7913aeb98fbf15416461406e6bf38c7e897456567122bbdb04b1493622801dac7379a9b74f2589851b")
	request3 := newRelayTransactionRequest(t, 4, "0x0495a8eec6689e04d4712c188f66dc3bb18497c8f5e3e86460f429eb97ea626761d92c43ecfb93bdda77b482b1904e7667e4df1dd3ebe03e9a27abbed42b287d1b")

	// Send 3 transactions, separated by 1 min each, and revert the last 2
	signedTx1, err := relay.CreateRelayTransaction(request1)
	test.ErrFailWithDesc(err, t, "Creating relay transaction 1")
	clk.IncrementBySeconds(60)
	snapshotID, err := client.Snapshot()
	test.ErrFailWithDesc(err, t, "Creating snapshot")
	_, err = relay.CreateRelayTransaction(request2)
	test.ErrFailWithDesc(err, t, "Creating relay transaction 2")
	clk.IncrementBySeconds(60)
	signedTx3, err := relay.CreateRelayTransaction(request3)
	test.ErrFailWithDesc(err, t, "Creating relay transaction 3")
	err = client.Revert(snapshotID)
	test.ErrFailWithDesc(err, t, "Restoring snapshot")
	nonce, err := client.NonceAt(context.Background(), relay.Address(), nil)

	// Check tx1 went fine
	assertTransactionRelayed(t, signedTx1.Hash())

	// After 5 minutes, tx2 is not resent because tx1 is still unconfirmed
	clk.IncrementBySeconds(60 * 5)
	assertNoTransactionResent(t, relay.RelayServer)
	assertRelayNonce(t, nonce)

	// Mine a bunch of blocks, so tx1 is confirmed and tx2 is resent
	client.MineBlocks(12)
	newTx2, err := relay.UpdateUnconfirmedTransactions()
	test.ErrFailWithDesc(err, t, "Updating unconfirmed transactions")
	assertRelayNonce(t, nonce+1)
	assertTransactionRelayed(t, newTx2.Hash())

	// Reinject tx3 into the chain as if it were mined once tx2 goes through
	test.ErrFailWithDesc(client.SendTransaction(context.Background(), signedTx3), t, "Resending tx3")
	assertTransactionRelayed(t, signedTx3.Hash())

	// Check that tx3 does not get resent, even after time passes or blocks get mined, and that store is empty
	assertNoTransactionResent(t, relay.RelayServer)
	clk.IncrementBySeconds(300)
	client.MineBlocks(12)
	assertNoTransactionResent(t, relay.RelayServer)
	noTx, err := relay.TxStore.GetFirstTransaction()
	if noTx != nil || err != nil {
		t.Errorf("Expected tx store to be empty but found %v (error %v)", noTx, err)
	}
}
